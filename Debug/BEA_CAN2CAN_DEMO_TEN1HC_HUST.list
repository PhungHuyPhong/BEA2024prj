
BEA_CAN2CAN_DEMO_TEN1HC_HUST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004914  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004aa4  08004aa4  00005aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b68  08004b68  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b68  08004b68  00005b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b70  08004b70  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b70  08004b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b74  08004b74  00005b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004b78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          000012f8  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001374  20001374  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9cf  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b46  00000000  00000000  00010a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  000125c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068e  00000000  00000000  00012e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b74  00000000  00000000  000134e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acee  00000000  00000000  0001505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bab6e  00000000  00000000  0001fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da8b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027a8  00000000  00000000  000da8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  000dd0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a8c 	.word	0x08004a8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004a8c 	.word	0x08004a8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fe95 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f851 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f997 	bl	80008a0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000572:	f000 f8b7 	bl	80006e4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000576:	f000 f90f 	bl	8000798 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 800057a:	f000 f967 	bl	800084c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 800057e:	f000 f9ff 	bl	8000980 <MX_CAN1_Setup>
  MX_CAN2_Setup();
 8000582:	f000 fa11 	bl	80009a8 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <main+0x80>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	68da      	ldr	r2, [r3, #12]
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <main+0x80>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f042 0220 	orr.w	r2, r2, #32
 8000594:	60da      	str	r2, [r3, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	CAN_Tx(&hcan2, &CAN2_pHeader, &CAN2_pTxMailbox, CAN2_DATA_RX, CAN2_DATA_TX, 0xA2);
 8000596:	23a2      	movs	r3, #162	@ 0xa2
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <main+0x84>)
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	4b12      	ldr	r3, [pc, #72]	@ (80005e8 <main+0x88>)
 80005a0:	4a12      	ldr	r2, [pc, #72]	@ (80005ec <main+0x8c>)
 80005a2:	4913      	ldr	r1, [pc, #76]	@ (80005f0 <main+0x90>)
 80005a4:	4813      	ldr	r0, [pc, #76]	@ (80005f4 <main+0x94>)
 80005a6:	f000 fb31 	bl	8000c0c <CAN_Tx>
	delay(2000);
 80005aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005ae:	f000 fad7 	bl	8000b60 <delay>
	CAN_Tx(&hcan1, &CAN1_pHeader, &CAN1_pTxMailbox, CAN1_DATA_RX, CAN1_DATA_TX, 0x12);
 80005b2:	2312      	movs	r3, #18
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <main+0x98>)
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <main+0x9c>)
 80005bc:	4a10      	ldr	r2, [pc, #64]	@ (8000600 <main+0xa0>)
 80005be:	4911      	ldr	r1, [pc, #68]	@ (8000604 <main+0xa4>)
 80005c0:	4811      	ldr	r0, [pc, #68]	@ (8000608 <main+0xa8>)
 80005c2:	f000 fb23 	bl	8000c0c <CAN_Tx>
	delay(1990);
 80005c6:	f240 70c6 	movw	r0, #1990	@ 0x7c6
 80005ca:	f000 fac9 	bl	8000b60 <delay>
	MessageCounter = MessageCounter + 1;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <main+0xac>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <main+0xac>)
 80005d8:	701a      	strb	r2, [r3, #0]
	CAN_Tx(&hcan2, &CAN2_pHeader, &CAN2_pTxMailbox, CAN2_DATA_RX, CAN2_DATA_TX, 0xA2);
 80005da:	bf00      	nop
 80005dc:	e7db      	b.n	8000596 <main+0x36>
 80005de:	bf00      	nop
 80005e0:	200000e8 	.word	0x200000e8
 80005e4:	20001208 	.word	0x20001208
 80005e8:	20001210 	.word	0x20001210
 80005ec:	200001ec 	.word	0x200001ec
 80005f0:	2000018c 	.word	0x2000018c
 80005f4:	200000c0 	.word	0x200000c0
 80005f8:	200011f8 	.word	0x200011f8
 80005fc:	20001200 	.word	0x20001200
 8000600:	200001e8 	.word	0x200001e8
 8000604:	20000130 	.word	0x20000130
 8000608:	20000098 	.word	0x20000098
 800060c:	2000121c 	.word	0x2000121c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fdb4 	bl	800418c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	@ (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000684:	2340      	movs	r3, #64	@ 0x40
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 f86b 	bl	8002770 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 fbea 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006b0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 facc 	bl	8002c60 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 fbd3 	bl	8000e78 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_CAN1_Init+0xa8>)
 80006ea:	4a29      	ldr	r2, [pc, #164]	@ (8000790 <MX_CAN1_Init+0xac>)
 80006ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80006ee:	4b27      	ldr	r3, [pc, #156]	@ (800078c <MX_CAN1_Init+0xa8>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_CAN1_Init+0xa8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80006fa:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_CAN1_Init+0xa8>)
 80006fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000700:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000702:	4b22      	ldr	r3, [pc, #136]	@ (800078c <MX_CAN1_Init+0xa8>)
 8000704:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000708:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_CAN1_Init+0xa8>)
 800070c:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000710:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000712:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_CAN1_Init+0xa8>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_CAN1_Init+0xa8>)
 800071a:	2200      	movs	r2, #0
 800071c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_CAN1_Init+0xa8>)
 8000720:	2200      	movs	r2, #0
 8000722:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_CAN1_Init+0xa8>)
 8000726:	2200      	movs	r2, #0
 8000728:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_CAN1_Init+0xa8>)
 800072c:	2200      	movs	r2, #0
 800072e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_CAN1_Init+0xa8>)
 8000732:	2200      	movs	r2, #0
 8000734:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000736:	4815      	ldr	r0, [pc, #84]	@ (800078c <MX_CAN1_Init+0xa8>)
 8000738:	f000 fe42 	bl	80013c0 <HAL_CAN_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000742:	f000 fb99 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN1_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_CAN1_Init+0xb0>)
 8000748:	2201      	movs	r2, #1
 800074a:	621a      	str	r2, [r3, #32]
  CAN1_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_CAN1_Init+0xb0>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  CAN1_sFilterConfig.SlaveStartFilterBank = 13;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_CAN1_Init+0xb0>)
 8000754:	220d      	movs	r2, #13
 8000756:	625a      	str	r2, [r3, #36]	@ 0x24
  CAN1_sFilterConfig.FilterBank = 8;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_CAN1_Init+0xb0>)
 800075a:	2208      	movs	r2, #8
 800075c:	615a      	str	r2, [r3, #20]
  CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_CAN1_Init+0xb0>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_CAN1_Init+0xb0>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  CAN1_sFilterConfig.FilterIdHigh = 0x0A2 << 5;
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_CAN1_Init+0xb0>)
 800076c:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 8000770:	601a      	str	r2, [r3, #0]
  CAN1_sFilterConfig.FilterIdLow = 0;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_CAN1_Init+0xb0>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  CAN1_sFilterConfig.FilterMaskIdHigh = 0x0A2 << 5;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_CAN1_Init+0xb0>)
 800077a:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 800077e:	609a      	str	r2, [r3, #8]
  CAN1_sFilterConfig.FilterMaskIdLow = 0;
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <MX_CAN1_Init+0xb0>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000098 	.word	0x20000098
 8000790:	40006400 	.word	0x40006400
 8000794:	20000164 	.word	0x20000164

08000798 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800079c:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <MX_CAN2_Init+0xa8>)
 800079e:	4a29      	ldr	r2, [pc, #164]	@ (8000844 <MX_CAN2_Init+0xac>)
 80007a0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 80007a2:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007a8:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80007ae:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80007b4:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007b8:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80007bc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007c0:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80007c4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <MX_CAN2_Init+0xa8>)
 80007ec:	f000 fde8 	bl	80013c0 <HAL_CAN_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80007f6:	f000 fb3f 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN2_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_CAN2_Init+0xb0>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	621a      	str	r2, [r3, #32]
  CAN2_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_CAN2_Init+0xb0>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  CAN2_sFilterConfig.SlaveStartFilterBank = 13;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_CAN2_Init+0xb0>)
 8000808:	220d      	movs	r2, #13
 800080a:	625a      	str	r2, [r3, #36]	@ 0x24
  CAN2_sFilterConfig.FilterBank = 19;
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_CAN2_Init+0xb0>)
 800080e:	2213      	movs	r2, #19
 8000810:	615a      	str	r2, [r3, #20]
  CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <MX_CAN2_Init+0xb0>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_CAN2_Init+0xb0>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  CAN2_sFilterConfig.FilterIdHigh = 0x012 << 5;
 800081e:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_CAN2_Init+0xb0>)
 8000820:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000824:	601a      	str	r2, [r3, #0]
  CAN2_sFilterConfig.FilterIdLow = 0;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_CAN2_Init+0xb0>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  CAN2_sFilterConfig.FilterMaskIdHigh = 0x012 << 5;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_CAN2_Init+0xb0>)
 800082e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000832:	609a      	str	r2, [r3, #8]
  CAN2_sFilterConfig.FilterMaskIdLow = 0;
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <MX_CAN2_Init+0xb0>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000c0 	.word	0x200000c0
 8000844:	40006800 	.word	0x40006800
 8000848:	200001c0 	.word	0x200001c0

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_USART3_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000884:	f002 fc0c 	bl	80030a0 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 faf3 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000e8 	.word	0x200000e8
 800089c:	40004800 	.word	0x40004800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <MX_GPIO_Init+0xd4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <MX_GPIO_Init+0xd4>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <MX_GPIO_Init+0xd4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_GPIO_Init+0xd4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <MX_GPIO_Init+0xd4>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <MX_GPIO_Init+0xd4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <MX_GPIO_Init+0xd4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000974 <MX_GPIO_Init+0xd4>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_GPIO_Init+0xd4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_GPIO_Init+0xd4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <MX_GPIO_Init+0xd4>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_GPIO_Init+0xd4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000926:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 800092a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	480f      	ldr	r0, [pc, #60]	@ (8000978 <MX_GPIO_Init+0xd8>)
 800093c:	f001 fd4c 	bl	80023d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000940:	2302      	movs	r3, #2
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000944:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4809      	ldr	r0, [pc, #36]	@ (800097c <MX_GPIO_Init+0xdc>)
 8000956:	f001 fd3f 	bl	80023d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2103      	movs	r1, #3
 800095e:	2007      	movs	r0, #7
 8000960:	f001 fc71 	bl	8002246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000964:	2007      	movs	r0, #7
 8000966:	f001 fc8a 	bl	800227e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	@ 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020800 	.word	0x40020800
 800097c:	40020000 	.word	0x40020000

08000980 <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000984:	4906      	ldr	r1, [pc, #24]	@ (80009a0 <MX_CAN1_Setup+0x20>)
 8000986:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <MX_CAN1_Setup+0x24>)
 8000988:	f000 fe16 	bl	80015b8 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_CAN1_Setup+0x24>)
 800098e:	f000 fef3 	bl	8001778 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000992:	2102      	movs	r1, #2
 8000994:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <MX_CAN1_Setup+0x24>)
 8000996:	f001 f925 	bl	8001be4 <HAL_CAN_ActivateNotification>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000164 	.word	0x20000164
 80009a4:	20000098 	.word	0x20000098

080009a8 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 80009ac:	4906      	ldr	r1, [pc, #24]	@ (80009c8 <MX_CAN2_Setup+0x20>)
 80009ae:	4807      	ldr	r0, [pc, #28]	@ (80009cc <MX_CAN2_Setup+0x24>)
 80009b0:	f000 fe02 	bl	80015b8 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_CAN2_Setup+0x24>)
 80009b6:	f000 fedf 	bl	8001778 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009ba:	2102      	movs	r1, #2
 80009bc:	4803      	ldr	r0, [pc, #12]	@ (80009cc <MX_CAN2_Setup+0x24>)
 80009be:	f001 f911 	bl	8001be4 <HAL_CAN_ActivateNotification>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200001c0 	.word	0x200001c0
 80009cc:	200000c0 	.word	0x200000c0

080009d0 <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 80009d8:	e009      	b.n	80009ee <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	2201      	movs	r2, #1
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <USART3_SendString+0x30>)
 80009e4:	f002 fbac 	bl	8003140 <HAL_UART_Transmit>
      ch++;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3301      	adds	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f1      	bne.n	80009da <USART3_SendString+0xa>
   }
}
 80009f6:	bf00      	nop
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000e8 	.word	0x200000e8

08000a04 <PrintCANLog>:
void PrintCANLog(uint16_t CAN_ID, uint8_t * CAN_Frame)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	80fb      	strh	r3, [r7, #6]
	uint16_t loopIndx = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	83fb      	strh	r3, [r7, #30]
		char bufID[3] = "   ";
 8000a14:	4a3b      	ldr	r2, [pc, #236]	@ (8000b04 <PrintCANLog+0x100>)
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	6812      	ldr	r2, [r2, #0]
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	8019      	strh	r1, [r3, #0]
 8000a20:	3302      	adds	r3, #2
 8000a22:	0c12      	lsrs	r2, r2, #16
 8000a24:	701a      	strb	r2, [r3, #0]
		char bufDat[2] = "  ";
 8000a26:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000a2a:	82bb      	strh	r3, [r7, #20]
		char bufTime [8]="        ";
 8000a2c:	4a36      	ldr	r2, [pc, #216]	@ (8000b08 <PrintCANLog+0x104>)
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a36:	e883 0003 	stmia.w	r3, {r0, r1}

		sprintf(bufTime,"%d",TimeStamp);
 8000a3a:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <PrintCANLog+0x108>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4933      	ldr	r1, [pc, #204]	@ (8000b10 <PrintCANLog+0x10c>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 fb81 	bl	800414c <siprintf>
		USART3_SendString((uint8_t*)bufTime);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffbe 	bl	80009d0 <USART3_SendString>
		USART3_SendString((uint8_t*)" ");
 8000a54:	482f      	ldr	r0, [pc, #188]	@ (8000b14 <PrintCANLog+0x110>)
 8000a56:	f7ff ffbb 	bl	80009d0 <USART3_SendString>

		sprintf(bufID,"%03X",CAN_ID);
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	492d      	ldr	r1, [pc, #180]	@ (8000b18 <PrintCANLog+0x114>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 fb72 	bl	800414c <siprintf>
		for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	83fb      	strh	r3, [r7, #30]
 8000a6c:	e00a      	b.n	8000a84 <PrintCANLog+0x80>
		{
			bufsend[loopIndx]  = bufID[loopIndx];
 8000a6e:	8bfa      	ldrh	r2, [r7, #30]
 8000a70:	8bfb      	ldrh	r3, [r7, #30]
 8000a72:	3220      	adds	r2, #32
 8000a74:	443a      	add	r2, r7
 8000a76:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000a7a:	4a28      	ldr	r2, [pc, #160]	@ (8000b1c <PrintCANLog+0x118>)
 8000a7c:	54d1      	strb	r1, [r2, r3]
		for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000a7e:	8bfb      	ldrh	r3, [r7, #30]
 8000a80:	3301      	adds	r3, #1
 8000a82:	83fb      	strh	r3, [r7, #30]
 8000a84:	8bfb      	ldrh	r3, [r7, #30]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d9f1      	bls.n	8000a6e <PrintCANLog+0x6a>
		}
		bufsend[3] = ':';
 8000a8a:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <PrintCANLog+0x118>)
 8000a8c:	223a      	movs	r2, #58	@ 0x3a
 8000a8e:	70da      	strb	r2, [r3, #3]
		bufsend[4] = ' ';
 8000a90:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <PrintCANLog+0x118>)
 8000a92:	2220      	movs	r2, #32
 8000a94:	711a      	strb	r2, [r3, #4]

		for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000a96:	2300      	movs	r3, #0
 8000a98:	83fb      	strh	r3, [r7, #30]
 8000a9a:	e025      	b.n	8000ae8 <PrintCANLog+0xe4>
		{
			sprintf(bufDat,"%02X",CAN_Frame[loopIndx]);
 8000a9c:	8bfb      	ldrh	r3, [r7, #30]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	491d      	ldr	r1, [pc, #116]	@ (8000b20 <PrintCANLog+0x11c>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 fb4d 	bl	800414c <siprintf>
			bufsend[loopIndx*3 + 5] = bufDat[0];
 8000ab2:	8bfa      	ldrh	r2, [r7, #30]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
 8000aba:	3305      	adds	r3, #5
 8000abc:	7d39      	ldrb	r1, [r7, #20]
 8000abe:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <PrintCANLog+0x118>)
 8000ac0:	54d1      	strb	r1, [r2, r3]
			bufsend[loopIndx*3 + 6] = bufDat[1];
 8000ac2:	8bfa      	ldrh	r2, [r7, #30]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	3306      	adds	r3, #6
 8000acc:	7d79      	ldrb	r1, [r7, #21]
 8000ace:	4a13      	ldr	r2, [pc, #76]	@ (8000b1c <PrintCANLog+0x118>)
 8000ad0:	54d1      	strb	r1, [r2, r3]
			bufsend[loopIndx*3 + 7] = ' ';
 8000ad2:	8bfa      	ldrh	r2, [r7, #30]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	3307      	adds	r3, #7
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <PrintCANLog+0x118>)
 8000ade:	2120      	movs	r1, #32
 8000ae0:	54d1      	strb	r1, [r2, r3]
		for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000ae2:	8bfb      	ldrh	r3, [r7, #30]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	83fb      	strh	r3, [r7, #30]
 8000ae8:	8bfb      	ldrh	r3, [r7, #30]
 8000aea:	2b07      	cmp	r3, #7
 8000aec:	d9d6      	bls.n	8000a9c <PrintCANLog+0x98>
		}
		bufsend[29] = '\n';
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <PrintCANLog+0x118>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	775a      	strb	r2, [r3, #29]
		USART3_SendString((unsigned char*)bufsend);
 8000af4:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <PrintCANLog+0x118>)
 8000af6:	f7ff ff6b 	bl	80009d0 <USART3_SendString>
}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	08004abc 	.word	0x08004abc
 8000b08:	08004ac0 	.word	0x08004ac0
 8000b0c:	20001218 	.word	0x20001218
 8000b10:	08004aa4 	.word	0x08004aa4
 8000b14:	08004aa8 	.word	0x08004aa8
 8000b18:	08004aac 	.word	0x08004aac
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	08004ab4 	.word	0x08004ab4

08000b24 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_UART_RxCpltCallback+0x30>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_UART_RxCpltCallback+0x34>)
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_UART_RxCpltCallback+0x38>)
 8000b38:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_UART_RxCpltCallback+0x30>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <HAL_UART_RxCpltCallback+0x30>)
 8000b44:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200001f0 	.word	0x200001f0
 8000b58:	200011f4 	.word	0x200011f4
 8000b5c:	200001f4 	.word	0x200001f4

08000b60 <delay>:
void delay(uint16_t delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fc03 	bl	8001378 <HAL_Delay>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <calc_SAE_J1850>:
uint8_t calc_SAE_J1850(uint8_t data[], uint8_t crc_len)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b085      	sub	sp, #20
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	70fb      	strb	r3, [r7, #3]
    uint8_t idx, crc, temp1, temp2, idy;
    crc = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73bb      	strb	r3, [r7, #14]
    idx = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
    idy = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	733b      	strb	r3, [r7, #12]
    temp1 = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	737b      	strb	r3, [r7, #13]
    temp2 = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	72fb      	strb	r3, [r7, #11]
    for(idx=0;idx < crc_len+1;idx++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e02a      	b.n	8000bf6 <calc_SAE_J1850+0x7c>
    {
        if(idx == 0)
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <calc_SAE_J1850+0x32>
        {
            temp1 = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	737b      	strb	r3, [r7, #13]
 8000baa:	e007      	b.n	8000bbc <calc_SAE_J1850+0x42>
        }
        else
        {
            temp1 = data[crc_len-idx];
 8000bac:	78fa      	ldrb	r2, [r7, #3]
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	737b      	strb	r3, [r7, #13]
        }
        crc = (crc^temp1);
 8000bbc:	7bba      	ldrb	r2, [r7, #14]
 8000bbe:	7b7b      	ldrb	r3, [r7, #13]
 8000bc0:	4053      	eors	r3, r2
 8000bc2:	73bb      	strb	r3, [r7, #14]
        for(idy=(uint8_t)8; idy>0; idy--)
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	733b      	strb	r3, [r7, #12]
 8000bc8:	e00f      	b.n	8000bea <calc_SAE_J1850+0x70>
        {
            // Save the value before the top bit is shifted out.
            temp2 = crc;
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	72fb      	strb	r3, [r7, #11]
            crc <<= 1;
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	73bb      	strb	r3, [r7, #14]
            if (0 != (temp2 & (uint8_t)128))
 8000bd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	da03      	bge.n	8000be4 <calc_SAE_J1850+0x6a>
                crc ^= 0x1D;
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	f083 031d 	eor.w	r3, r3, #29
 8000be2:	73bb      	strb	r3, [r7, #14]
        for(idy=(uint8_t)8; idy>0; idy--)
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	733b      	strb	r3, [r7, #12]
 8000bea:	7b3b      	ldrb	r3, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ec      	bne.n	8000bca <calc_SAE_J1850+0x50>
    for(idx=0;idx < crc_len+1;idx++)
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d2d0      	bcs.n	8000ba0 <calc_SAE_J1850+0x26>
        }
    }
    return crc;
 8000bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <CAN_Tx>:
void CAN_Tx(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint32_t *pTxMailbox, uint8_t *data_rx, uint8_t *data_tx, uint16_t id){
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	603b      	str	r3, [r7, #0]
	pHeader->StdId = id;
 8000c1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	601a      	str	r2, [r3, #0]
	pHeader->DLC = 8;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2208      	movs	r2, #8
 8000c24:	611a      	str	r2, [r3, #16]
	pHeader->IDE = CAN_ID_STD;
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
	pHeader->RTR = CAN_RTR_DATA;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
	if(data_rx[7] == calc_SAE_J1850(data_rx,7)){
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	3307      	adds	r3, #7
 8000c36:	781c      	ldrb	r4, [r3, #0]
 8000c38:	2107      	movs	r1, #7
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff ff9d 	bl	8000b7a <calc_SAE_J1850>
 8000c40:	4603      	mov	r3, r0
 8000c42:	429c      	cmp	r4, r3
 8000c44:	d10f      	bne.n	8000c66 <CAN_Tx+0x5a>
		data_tx[0] = 0x0A;
 8000c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c48:	220a      	movs	r2, #10
 8000c4a:	701a      	strb	r2, [r3, #0]
		data_tx[1] = 0x02;
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c4e:	3301      	adds	r3, #1
 8000c50:	2202      	movs	r2, #2
 8000c52:	701a      	strb	r2, [r3, #0]
		if(data_rx == CAN1_DATA_RX){
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	4a2a      	ldr	r2, [pc, #168]	@ (8000d00 <CAN_Tx+0xf4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d10b      	bne.n	8000c74 <CAN_Tx+0x68>
			data_tx[2] = 0x0C;
 8000c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c5e:	3302      	adds	r3, #2
 8000c60:	220c      	movs	r2, #12
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e006      	b.n	8000c74 <CAN_Tx+0x68>
		}
	}
	else{
		data_tx[0] = 0x00;
 8000c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
		data_tx[1] = 0x00;
 8000c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c6e:	3301      	adds	r3, #1
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
	}
	data_tx[6] = MessageCounter;
 8000c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c76:	3306      	adds	r3, #6
 8000c78:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <CAN_Tx+0xf8>)
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	701a      	strb	r2, [r3, #0]
	if(flag == 0){
 8000c7e:	4b22      	ldr	r3, [pc, #136]	@ (8000d08 <CAN_Tx+0xfc>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d108      	bne.n	8000c98 <CAN_Tx+0x8c>
		data_tx[7] = calc_SAE_J1850(data_tx,7);
 8000c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c88:	1ddc      	adds	r4, r3, #7
 8000c8a:	2107      	movs	r1, #7
 8000c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000c8e:	f7ff ff74 	bl	8000b7a <calc_SAE_J1850>
 8000c92:	4603      	mov	r3, r0
 8000c94:	7023      	strb	r3, [r4, #0]
 8000c96:	e00b      	b.n	8000cb0 <CAN_Tx+0xa4>
	}
	else{
		if(hcan == &hcan2) CAN2_DATA_TX[7] = calc_SAE_J1850(CAN2_DATA_TX,7);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <CAN_Tx+0x100>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d107      	bne.n	8000cb0 <CAN_Tx+0xa4>
 8000ca0:	2107      	movs	r1, #7
 8000ca2:	481b      	ldr	r0, [pc, #108]	@ (8000d10 <CAN_Tx+0x104>)
 8000ca4:	f7ff ff69 	bl	8000b7a <calc_SAE_J1850>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <CAN_Tx+0x104>)
 8000cae:	71da      	strb	r2, [r3, #7]
	}
	char buffer[10];
	sprintf(buffer, "CAN %u TX\n", (hcan == &hcan1) ? 1 : 2);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <CAN_Tx+0x108>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d101      	bne.n	8000cbc <CAN_Tx+0xb0>
 8000cb8:	2201      	movs	r2, #1
 8000cba:	e000      	b.n	8000cbe <CAN_Tx+0xb2>
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4915      	ldr	r1, [pc, #84]	@ (8000d18 <CAN_Tx+0x10c>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fa41 	bl	800414c <siprintf>
	USART3_SendString((unsigned char *)buffer);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe7e 	bl	80009d0 <USART3_SendString>
	PrintCANLog(id, data_tx);
 8000cd4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000cd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe93 	bl	8000a04 <PrintCANLog>
	HAL_CAN_AddTxMessage(hcan, pHeader, data_tx, pTxMailbox);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f000 fd8b 	bl	8001800 <HAL_CAN_AddTxMessage>
	MessageCounter = MessageCounter & 0xF;
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <CAN_Tx+0xf8>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <CAN_Tx+0xf8>)
 8000cf6:	701a      	strb	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	3724      	adds	r7, #36	@ 0x24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	20001200 	.word	0x20001200
 8000d04:	2000121c 	.word	0x2000121c
 8000d08:	2000121d 	.word	0x2000121d
 8000d0c:	200000c0 	.word	0x200000c0
 8000d10:	20001208 	.word	0x20001208
 8000d14:	20000098 	.word	0x20000098
 8000d18:	08004ac8 	.word	0x08004ac8

08000d1c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b090      	sub	sp, #64	@ 0x40
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1){
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a27      	ldr	r2, [pc, #156]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d115      	bne.n	8000d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 8000d2c:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000d2e:	4a27      	ldr	r2, [pc, #156]	@ (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000d30:	2100      	movs	r1, #0
 8000d32:	4824      	ldr	r0, [pc, #144]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000d34:	f000 fe34 	bl	80019a0 <HAL_CAN_GetRxMessage>
		char buffer1[10] = "CAN 1 RX\n";
 8000d38:	4a25      	ldr	r2, [pc, #148]	@ (8000dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000d3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d40:	c303      	stmia	r3!, {r0, r1}
 8000d42:	801a      	strh	r2, [r3, #0]
		USART3_SendString((unsigned char *)buffer1);
 8000d44:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fe41 	bl	80009d0 <USART3_SendString>
		PrintCANLog(0xA2, CAN1_DATA_RX);
 8000d4e:	491e      	ldr	r1, [pc, #120]	@ (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000d50:	20a2      	movs	r0, #162	@ 0xa2
 8000d52:	f7ff fe57 	bl	8000a04 <PrintCANLog>
		else{
			char buffer3[26] = "CAN 2 RX ERROR WRONG CRC\n";
			USART3_SendString((unsigned char *)buffer3);
		}
	}
}
 8000d56:	e031      	b.n	8000dbc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
	else if(hcan == &hcan2){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d12d      	bne.n	8000dbc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
		HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000d62:	4a1e      	ldr	r2, [pc, #120]	@ (8000ddc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000d64:	2100      	movs	r1, #0
 8000d66:	481b      	ldr	r0, [pc, #108]	@ (8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000d68:	f000 fe1a 	bl	80019a0 <HAL_CAN_GetRxMessage>
		if(CAN2_DATA_RX[7] == calc_SAE_J1850(CAN2_DATA_RX,7)){
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000d6e:	79dc      	ldrb	r4, [r3, #7]
 8000d70:	2107      	movs	r1, #7
 8000d72:	4819      	ldr	r0, [pc, #100]	@ (8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000d74:	f7ff ff01 	bl	8000b7a <calc_SAE_J1850>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	d10f      	bne.n	8000d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
			char buffer2[10] = "CAN 2 RX\n";
 8000d7e:	4a18      	ldr	r2, [pc, #96]	@ (8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000d80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d84:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d86:	c303      	stmia	r3!, {r0, r1}
 8000d88:	801a      	strh	r2, [r3, #0]
			USART3_SendString((unsigned char *)buffer2);
 8000d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fe1e 	bl	80009d0 <USART3_SendString>
			PrintCANLog(0x12, CAN2_DATA_RX);
 8000d94:	4910      	ldr	r1, [pc, #64]	@ (8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000d96:	2012      	movs	r0, #18
 8000d98:	f7ff fe34 	bl	8000a04 <PrintCANLog>
}
 8000d9c:	e00e      	b.n	8000dbc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			char buffer3[26] = "CAN 2 RX ERROR WRONG CRC\n";
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000da0:	f107 040c 	add.w	r4, r7, #12
 8000da4:	461d      	mov	r5, r3
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dae:	c403      	stmia	r4!, {r0, r1}
 8000db0:	8022      	strh	r2, [r4, #0]
			USART3_SendString((unsigned char *)buffer3);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fe0a 	bl	80009d0 <USART3_SendString>
}
 8000dbc:	bf00      	nop
 8000dbe:	3740      	adds	r7, #64	@ 0x40
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc4:	20000098 	.word	0x20000098
 8000dc8:	20001200 	.word	0x20001200
 8000dcc:	20000148 	.word	0x20000148
 8000dd0:	08004ad4 	.word	0x08004ad4
 8000dd4:	200000c0 	.word	0x200000c0
 8000dd8:	20001210 	.word	0x20001210
 8000ddc:	200001a4 	.word	0x200001a4
 8000de0:	08004ae0 	.word	0x08004ae0
 8000de4:	08004aec 	.word	0x08004aec

08000de8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_EXTI_Callback+0x72>
	{
		delay(20);
 8000df8:	2014      	movs	r0, #20
 8000dfa:	f7ff feb1 	bl	8000b60 <delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4818      	ldr	r0, [pc, #96]	@ (8000e64 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e02:	f001 fc85 	bl	8002710 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d126      	bne.n	8000e5a <HAL_GPIO_EXTI_Callback+0x72>
		{
			switch(flag)
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <HAL_GPIO_EXTI_Callback+0x32>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d011      	beq.n	8000e3c <HAL_GPIO_EXTI_Callback+0x54>
					flag = 0;
					USART3_SendString((uint8_t *)"-> IG ON\n");
					CAN1_DATA_TX[7] = calc_SAE_J1850(CAN1_DATA_TX,7);
					break;
				default:
					break;
 8000e18:	e01f      	b.n	8000e5a <HAL_GPIO_EXTI_Callback+0x72>
					flag = flag + 1;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e24:	701a      	strb	r2, [r3, #0]
					USART3_SendString((uint8_t *)"IG OFF\n");
 8000e26:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <HAL_GPIO_EXTI_Callback+0x84>)
 8000e28:	f7ff fdd2 	bl	80009d0 <USART3_SendString>
					CAN1_DATA_TX[7] = calc_SAE_J1850(CAN1_DATA_TX,7) & 0x0;
 8000e2c:	2107      	movs	r1, #7
 8000e2e:	4810      	ldr	r0, [pc, #64]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e30:	f7ff fea3 	bl	8000b7a <calc_SAE_J1850>
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	71da      	strb	r2, [r3, #7]
					break;
 8000e3a:	e00e      	b.n	8000e5a <HAL_GPIO_EXTI_Callback+0x72>
					flag = 0;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
					USART3_SendString((uint8_t *)"-> IG ON\n");
 8000e42:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000e44:	f7ff fdc4 	bl	80009d0 <USART3_SendString>
					CAN1_DATA_TX[7] = calc_SAE_J1850(CAN1_DATA_TX,7);
 8000e48:	2107      	movs	r1, #7
 8000e4a:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e4c:	f7ff fe95 	bl	8000b7a <calc_SAE_J1850>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e56:	71da      	strb	r2, [r3, #7]
					break;
 8000e58:	bf00      	nop
			}
		}
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40020000 	.word	0x40020000
 8000e68:	2000121d 	.word	0x2000121d
 8000e6c:	08004b08 	.word	0x08004b08
 8000e70:	200011f8 	.word	0x200011f8
 8000e74:	08004b10 	.word	0x08004b10

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <Error_Handler+0x8>

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800101c <HAL_CAN_MspInit+0x148>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d13e      	bne.n	8000f74 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8001020 <HAL_CAN_MspInit+0x14c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a48      	ldr	r2, [pc, #288]	@ (8001020 <HAL_CAN_MspInit+0x14c>)
 8000efe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f00:	4b47      	ldr	r3, [pc, #284]	@ (8001020 <HAL_CAN_MspInit+0x14c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d10d      	bne.n	8000f24 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	4b45      	ldr	r3, [pc, #276]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	4a44      	ldr	r2, [pc, #272]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f18:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	4b3e      	ldr	r3, [pc, #248]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f34:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f40:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f52:	2309      	movs	r3, #9
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4832      	ldr	r0, [pc, #200]	@ (8001028 <HAL_CAN_MspInit+0x154>)
 8000f5e:	f001 fa3b 	bl	80023d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2102      	movs	r1, #2
 8000f66:	2014      	movs	r0, #20
 8000f68:	f001 f96d 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f6c:	2014      	movs	r0, #20
 8000f6e:	f001 f986 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000f72:	e04f      	b.n	8001014 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a2c      	ldr	r2, [pc, #176]	@ (800102c <HAL_CAN_MspInit+0x158>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d14a      	bne.n	8001014 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	4a27      	ldr	r2, [pc, #156]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8e:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <HAL_CAN_MspInit+0x14c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_CAN_MspInit+0x14c>)
 8000fa2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <HAL_CAN_MspInit+0x14c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10d      	bne.n	8000fc8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000fb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_CAN_MspInit+0x150>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fe4:	2360      	movs	r3, #96	@ 0x60
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480c      	ldr	r0, [pc, #48]	@ (8001030 <HAL_CAN_MspInit+0x15c>)
 8001000:	f001 f9ea 	bl	80023d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2102      	movs	r1, #2
 8001008:	2040      	movs	r0, #64	@ 0x40
 800100a:	f001 f91c 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800100e:	2040      	movs	r0, #64	@ 0x40
 8001010:	f001 f935 	bl	800227e <HAL_NVIC_EnableIRQ>
}
 8001014:	bf00      	nop
 8001016:	3730      	adds	r7, #48	@ 0x30
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40006400 	.word	0x40006400
 8001020:	20001220 	.word	0x20001220
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000
 800102c:	40006800 	.word	0x40006800
 8001030:	40020400 	.word	0x40020400

08001034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1d      	ldr	r2, [pc, #116]	@ (80010c8 <HAL_UART_MspInit+0x94>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d134      	bne.n	80010c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <HAL_UART_MspInit+0x98>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <HAL_UART_MspInit+0x98>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001064:	6413      	str	r3, [r2, #64]	@ 0x40
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_UART_MspInit+0x98>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_UART_MspInit+0x98>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_UART_MspInit+0x98>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_UART_MspInit+0x98>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800108e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a0:	2307      	movs	r3, #7
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4809      	ldr	r0, [pc, #36]	@ (80010d0 <HAL_UART_MspInit+0x9c>)
 80010ac:	f001 f994 	bl	80023d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2101      	movs	r1, #1
 80010b4:	2027      	movs	r0, #39	@ 0x27
 80010b6:	f001 f8c6 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010ba:	2027      	movs	r0, #39	@ 0x27
 80010bc:	f001 f8df 	bl	800227e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	@ 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40004800 	.word	0x40004800
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020800 	.word	0x40020800

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <NMI_Handler+0x4>

080010dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <MemManage_Handler+0x4>

080010ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f904 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <SysTick_Handler+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a02      	ldr	r2, [pc, #8]	@ (8001140 <SysTick_Handler+0x18>)
 8001138:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20001218 	.word	0x20001218

08001144 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001148:	2002      	movs	r0, #2
 800114a:	f001 faf9 	bl	8002740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <CAN1_RX0_IRQHandler+0x1c>)
 800115a:	f000 fd69 	bl	8001c30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 800115e:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <CAN1_RX0_IRQHandler+0x20>)
 8001160:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <CAN1_RX0_IRQHandler+0x24>)
 8001162:	2100      	movs	r1, #0
 8001164:	4802      	ldr	r0, [pc, #8]	@ (8001170 <CAN1_RX0_IRQHandler+0x1c>)
 8001166:	f000 fc1b 	bl	80019a0 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000098 	.word	0x20000098
 8001174:	20001200 	.word	0x20001200
 8001178:	20000148 	.word	0x20000148

0800117c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <USART3_IRQHandler+0x18>)
 8001182:	f002 f88d 	bl	80032a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8001186:	2201      	movs	r2, #1
 8001188:	4903      	ldr	r1, [pc, #12]	@ (8001198 <USART3_IRQHandler+0x1c>)
 800118a:	4802      	ldr	r0, [pc, #8]	@ (8001194 <USART3_IRQHandler+0x18>)
 800118c:	f002 f863 	bl	8003256 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000e8 	.word	0x200000e8
 8001198:	200011f4 	.word	0x200011f4

0800119c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <CAN2_RX0_IRQHandler+0x10>)
 80011a2:	f000 fd45 	bl	8001c30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000c0 	.word	0x200000c0

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	@ (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f002 ffdc 	bl	800419c <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20020000 	.word	0x20020000
 8001210:	00000400 	.word	0x00000400
 8001214:	20001224 	.word	0x20001224
 8001218:	20001378 	.word	0x20001378

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001244:	480d      	ldr	r0, [pc, #52]	@ (800127c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001246:	490e      	ldr	r1, [pc, #56]	@ (8001280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800125c:	4c0b      	ldr	r4, [pc, #44]	@ (800128c <LoopFillZerobss+0x26>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126a:	f7ff ffd7 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126e:	f002 ff9b 	bl	80041a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff f975 	bl	8000560 <main>
  bx  lr    
 8001276:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001284:	08004b78 	.word	0x08004b78
  ldr r2, =_sbss
 8001288:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800128c:	20001374 	.word	0x20001374

08001290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <HAL_Init+0x40>)
 800129e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <HAL_Init+0x40>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <HAL_Init+0x40>)
 80012b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 ffb7 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff fddc 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023c00 	.word	0x40023c00

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 ffcf 	bl	800229a <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 ff97 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	@ (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000020 	.word	0x20000020
 8001330:	20000028 	.word	0x20000028
 8001334:	20000024 	.word	0x20000024

08001338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	@ (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000028 	.word	0x20000028
 800135c:	20001228 	.word	0x20001228

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20001228 	.word	0x20001228

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000028 	.word	0x20000028

080013c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0ed      	b.n	80015ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fd78 	bl	8000ed4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f4:	f7ff ffb4 	bl	8001360 <HAL_GetTick>
 80013f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013fa:	e012      	b.n	8001422 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013fc:	f7ff ffb0 	bl	8001360 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b0a      	cmp	r3, #10
 8001408:	d90b      	bls.n	8001422 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2205      	movs	r2, #5
 800141a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0c5      	b.n	80015ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0e5      	beq.n	80013fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0202 	bic.w	r2, r2, #2
 800143e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001440:	f7ff ff8e 	bl	8001360 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001446:	e012      	b.n	800146e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001448:	f7ff ff8a 	bl	8001360 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b0a      	cmp	r3, #10
 8001454:	d90b      	bls.n	800146e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2205      	movs	r2, #5
 8001466:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e09f      	b.n	80015ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e5      	bne.n	8001448 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7e1b      	ldrb	r3, [r3, #24]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e007      	b.n	80014a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7e5b      	ldrb	r3, [r3, #25]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e007      	b.n	80014d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7e9b      	ldrb	r3, [r3, #26]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d108      	bne.n	80014ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0220 	orr.w	r2, r2, #32
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e007      	b.n	80014fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0220 	bic.w	r2, r2, #32
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7edb      	ldrb	r3, [r3, #27]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d108      	bne.n	8001514 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0210 	bic.w	r2, r2, #16
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e007      	b.n	8001524 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0210 	orr.w	r2, r2, #16
 8001522:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7f1b      	ldrb	r3, [r3, #28]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0208 	orr.w	r2, r2, #8
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e007      	b.n	800154e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0208 	bic.w	r2, r2, #8
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7f5b      	ldrb	r3, [r3, #29]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0204 	orr.w	r2, r2, #4
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e007      	b.n	8001578 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0204 	bic.w	r2, r2, #4
 8001576:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	ea42 0103 	orr.w	r1, r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015d0:	7cfb      	ldrb	r3, [r7, #19]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d003      	beq.n	80015de <HAL_CAN_ConfigFilter+0x26>
 80015d6:	7cfb      	ldrb	r3, [r7, #19]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	f040 80be 	bne.w	800175a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015de:	4b65      	ldr	r3, [pc, #404]	@ (8001774 <HAL_CAN_ConfigFilter+0x1bc>)
 80015e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015f8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	431a      	orrs	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	2201      	movs	r2, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	401a      	ands	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d123      	bne.n	8001688 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001662:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3248      	adds	r2, #72	@ 0x48
 8001668:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800167c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800167e:	6979      	ldr	r1, [r7, #20]
 8001680:	3348      	adds	r3, #72	@ 0x48
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d122      	bne.n	80016d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	431a      	orrs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3248      	adds	r2, #72	@ 0x48
 80016b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016cc:	6979      	ldr	r1, [r7, #20]
 80016ce:	3348      	adds	r3, #72	@ 0x48
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	401a      	ands	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80016f0:	e007      	b.n	8001702 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800171c:	e007      	b.n	800172e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	431a      	orrs	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800174c:	f023 0201 	bic.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e006      	b.n	8001768 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
  }
}
 8001768:	4618      	mov	r0, r3
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40006400 	.word	0x40006400

08001778 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d12e      	bne.n	80017ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017a4:	f7ff fddc 	bl	8001360 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017aa:	e012      	b.n	80017d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ac:	f7ff fdd8 	bl	8001360 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d90b      	bls.n	80017d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2205      	movs	r2, #5
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e012      	b.n	80017f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e5      	bne.n	80017ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e006      	b.n	80017f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
  }
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d003      	beq.n	800182c <HAL_CAN_AddTxMessage+0x2c>
 8001824:	7ffb      	ldrb	r3, [r7, #31]
 8001826:	2b02      	cmp	r3, #2
 8001828:	f040 80ad 	bne.w	8001986 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10a      	bne.n	800184c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8095 	beq.w	8001976 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	0e1b      	lsrs	r3, r3, #24
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001856:	2201      	movs	r2, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10d      	bne.n	8001884 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	6809      	ldr	r1, [r1, #0]
 8001876:	431a      	orrs	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3318      	adds	r3, #24
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	440b      	add	r3, r1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00f      	b.n	80018a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800188e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001898:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3318      	adds	r3, #24
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	440b      	add	r3, r1
 80018a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3318      	adds	r3, #24
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	440b      	add	r3, r1
 80018b4:	3304      	adds	r3, #4
 80018b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	7d1b      	ldrb	r3, [r3, #20]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d111      	bne.n	80018e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3318      	adds	r3, #24
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	3304      	adds	r3, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	6811      	ldr	r1, [r2, #0]
 80018d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3318      	adds	r3, #24
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	440b      	add	r3, r1
 80018e0:	3304      	adds	r3, #4
 80018e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3307      	adds	r3, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	061a      	lsls	r2, r3, #24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3306      	adds	r3, #6
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3305      	adds	r3, #5
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	4313      	orrs	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	3204      	adds	r2, #4
 8001904:	7812      	ldrb	r2, [r2, #0]
 8001906:	4610      	mov	r0, r2
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6811      	ldr	r1, [r2, #0]
 800190c:	ea43 0200 	orr.w	r2, r3, r0
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	440b      	add	r3, r1
 8001916:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800191a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3303      	adds	r3, #3
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	061a      	lsls	r2, r3, #24
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3302      	adds	r3, #2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	041b      	lsls	r3, r3, #16
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3301      	adds	r3, #1
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	4313      	orrs	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	7812      	ldrb	r2, [r2, #0]
 800193c:	4610      	mov	r0, r2
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	6811      	ldr	r1, [r2, #0]
 8001942:	ea43 0200 	orr.w	r2, r3, r0
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	440b      	add	r3, r1
 800194c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001950:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3318      	adds	r3, #24
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4413      	add	r3, r2
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	6811      	ldr	r1, [r2, #0]
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3318      	adds	r3, #24
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	440b      	add	r3, r1
 8001970:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e00e      	b.n	8001994 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e006      	b.n	8001994 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3724      	adds	r7, #36	@ 0x24
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_GetRxMessage+0x24>
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	f040 8103 	bne.w	8001bca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10e      	bne.n	80019e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d116      	bne.n	8001a06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0f7      	b.n	8001bd8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d107      	bne.n	8001a06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0e8      	b.n	8001bd8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	331b      	adds	r3, #27
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0204 	and.w	r2, r3, #4
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10c      	bne.n	8001a3e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	331b      	adds	r3, #27
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0d5b      	lsrs	r3, r3, #21
 8001a34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e00b      	b.n	8001a56 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	331b      	adds	r3, #27
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	331b      	adds	r3, #27
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0202 	and.w	r2, r3, #2
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	331b      	adds	r3, #27
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2208      	movs	r2, #8
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	331b      	adds	r3, #27
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	3304      	adds	r3, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 020f 	and.w	r2, r3, #15
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	331b      	adds	r3, #27
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	331b      	adds	r3, #27
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0a1a      	lsrs	r2, r3, #8
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0c1a      	lsrs	r2, r3, #16
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0e1a      	lsrs	r2, r3, #24
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3303      	adds	r3, #3
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0a1a      	lsrs	r2, r3, #8
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3305      	adds	r3, #5
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0c1a      	lsrs	r2, r3, #16
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3306      	adds	r3, #6
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e1a      	lsrs	r2, r3, #24
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3307      	adds	r3, #7
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d108      	bne.n	8001bb6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	e007      	b.n	8001bc6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0220 	orr.w	r2, r2, #32
 8001bc4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e006      	b.n	8001bd8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
  }
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d002      	beq.n	8001c02 <HAL_CAN_ActivateNotification+0x1e>
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d109      	bne.n	8001c16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6959      	ldr	r1, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e006      	b.n	8001c24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
  }
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d07c      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d023      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f983 	bl	8001f9e <HAL_CAN_TxMailbox0CompleteCallback>
 8001c98:	e016      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	e00c      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc0:	e002      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f989 	bl	8001fda <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d024      	beq.n	8001d1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f963 	bl	8001fb2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cec:	e016      	b.n	8001d1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d00:	e00c      	b.n	8001d1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d14:	e002      	b.n	8001d1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f969 	bl	8001fee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d024      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f943 	bl	8001fc6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d40:	e016      	b.n	8001d70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d54:	e00c      	b.n	8001d70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d68:	e002      	b.n	8001d70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f949 	bl	8002002 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00c      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2210      	movs	r2, #16
 8001d92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2208      	movs	r2, #8
 8001dae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f930 	bl	8002016 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe ffa4 	bl	8000d1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2210      	movs	r2, #16
 8001df6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2208      	movs	r2, #8
 8001e12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f912 	bl	800203e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8f9 	bl	800202a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2210      	movs	r2, #16
 8001e52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8fc 	bl	8002052 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00b      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2208      	movs	r2, #8
 8001e74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8f5 	bl	8002066 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d07b      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d072      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d008      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d043      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d03e      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001efe:	2b60      	cmp	r3, #96	@ 0x60
 8001f00:	d02b      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x32a>
 8001f02:	2b60      	cmp	r3, #96	@ 0x60
 8001f04:	d82e      	bhi.n	8001f64 <HAL_CAN_IRQHandler+0x334>
 8001f06:	2b50      	cmp	r3, #80	@ 0x50
 8001f08:	d022      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x320>
 8001f0a:	2b50      	cmp	r3, #80	@ 0x50
 8001f0c:	d82a      	bhi.n	8001f64 <HAL_CAN_IRQHandler+0x334>
 8001f0e:	2b40      	cmp	r3, #64	@ 0x40
 8001f10:	d019      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x316>
 8001f12:	2b40      	cmp	r3, #64	@ 0x40
 8001f14:	d826      	bhi.n	8001f64 <HAL_CAN_IRQHandler+0x334>
 8001f16:	2b30      	cmp	r3, #48	@ 0x30
 8001f18:	d010      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x30c>
 8001f1a:	2b30      	cmp	r3, #48	@ 0x30
 8001f1c:	d822      	bhi.n	8001f64 <HAL_CAN_IRQHandler+0x334>
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d002      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x2f8>
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d005      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f26:	e01d      	b.n	8001f64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f30:	e019      	b.n	8001f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	f043 0310 	orr.w	r3, r3, #16
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3a:	e014      	b.n	8001f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	f043 0320 	orr.w	r3, r3, #32
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f44:	e00f      	b.n	8001f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f4e:	e00a      	b.n	8001f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f58:	e005      	b.n	8001f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f62:	e000      	b.n	8001f66 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f872 	bl	800207a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	@ 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	@ (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	@ (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff f84e 	bl	8001360 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d008      	beq.n	80022e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2280      	movs	r2, #128	@ 0x80
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e052      	b.n	800238a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0216 	bic.w	r2, r2, #22
 80022f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002302:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d103      	bne.n	8002314 <HAL_DMA_Abort+0x62>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0208 	bic.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002334:	e013      	b.n	800235e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002336:	f7ff f813 	bl	8001360 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b05      	cmp	r3, #5
 8002342:	d90c      	bls.n	800235e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e015      	b.n	800238a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e4      	bne.n	8002336 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	223f      	movs	r2, #63	@ 0x3f
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d004      	beq.n	80023b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2280      	movs	r2, #128	@ 0x80
 80023aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e00c      	b.n	80023ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2205      	movs	r2, #5
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	@ 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e16b      	b.n	80026cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 815a 	bne.w	80026c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d005      	beq.n	800242a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	2b02      	cmp	r3, #2
 8002428:	d130      	bne.n	800248c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 0201 	and.w	r2, r3, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b03      	cmp	r3, #3
 8002496:	d017      	beq.n	80024c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d123      	bne.n	800251c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80b4 	beq.w	80026c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b60      	ldr	r3, [pc, #384]	@ (80026e4 <HAL_GPIO_Init+0x30c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	4a5f      	ldr	r2, [pc, #380]	@ (80026e4 <HAL_GPIO_Init+0x30c>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800256c:	6453      	str	r3, [r2, #68]	@ 0x44
 800256e:	4b5d      	ldr	r3, [pc, #372]	@ (80026e4 <HAL_GPIO_Init+0x30c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257a:	4a5b      	ldr	r2, [pc, #364]	@ (80026e8 <HAL_GPIO_Init+0x310>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a52      	ldr	r2, [pc, #328]	@ (80026ec <HAL_GPIO_Init+0x314>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02b      	beq.n	80025fe <HAL_GPIO_Init+0x226>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a51      	ldr	r2, [pc, #324]	@ (80026f0 <HAL_GPIO_Init+0x318>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d025      	beq.n	80025fa <HAL_GPIO_Init+0x222>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a50      	ldr	r2, [pc, #320]	@ (80026f4 <HAL_GPIO_Init+0x31c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01f      	beq.n	80025f6 <HAL_GPIO_Init+0x21e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4f      	ldr	r2, [pc, #316]	@ (80026f8 <HAL_GPIO_Init+0x320>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d019      	beq.n	80025f2 <HAL_GPIO_Init+0x21a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4e      	ldr	r2, [pc, #312]	@ (80026fc <HAL_GPIO_Init+0x324>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_GPIO_Init+0x216>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002700 <HAL_GPIO_Init+0x328>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00d      	beq.n	80025ea <HAL_GPIO_Init+0x212>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002704 <HAL_GPIO_Init+0x32c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <HAL_GPIO_Init+0x20e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002708 <HAL_GPIO_Init+0x330>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_GPIO_Init+0x20a>
 80025de:	2307      	movs	r3, #7
 80025e0:	e00e      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025e2:	2308      	movs	r3, #8
 80025e4:	e00c      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e00a      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e008      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x228>
 80025fe:	2300      	movs	r3, #0
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002610:	4935      	ldr	r1, [pc, #212]	@ (80026e8 <HAL_GPIO_Init+0x310>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261e:	4b3b      	ldr	r3, [pc, #236]	@ (800270c <HAL_GPIO_Init+0x334>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002642:	4a32      	ldr	r2, [pc, #200]	@ (800270c <HAL_GPIO_Init+0x334>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002648:	4b30      	ldr	r3, [pc, #192]	@ (800270c <HAL_GPIO_Init+0x334>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800266c:	4a27      	ldr	r2, [pc, #156]	@ (800270c <HAL_GPIO_Init+0x334>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002672:	4b26      	ldr	r3, [pc, #152]	@ (800270c <HAL_GPIO_Init+0x334>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002696:	4a1d      	ldr	r2, [pc, #116]	@ (800270c <HAL_GPIO_Init+0x334>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <HAL_GPIO_Init+0x334>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c0:	4a12      	ldr	r2, [pc, #72]	@ (800270c <HAL_GPIO_Init+0x334>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	f67f ae90 	bls.w	80023f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40013800 	.word	0x40013800
 80026ec:	40020000 	.word	0x40020000
 80026f0:	40020400 	.word	0x40020400
 80026f4:	40020800 	.word	0x40020800
 80026f8:	40020c00 	.word	0x40020c00
 80026fc:	40021000 	.word	0x40021000
 8002700:	40021400 	.word	0x40021400
 8002704:	40021800 	.word	0x40021800
 8002708:	40021c00 	.word	0x40021c00
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e001      	b.n	8002732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800274a:	4b08      	ldr	r3, [pc, #32]	@ (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002756:	4a05      	ldr	r2, [pc, #20]	@ (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fb42 	bl	8000de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e267      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d075      	beq.n	800287a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278e:	4b88      	ldr	r3, [pc, #544]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b04      	cmp	r3, #4
 8002798:	d00c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b85      	ldr	r3, [pc, #532]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d112      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b82      	ldr	r3, [pc, #520]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4b7e      	ldr	r3, [pc, #504]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05b      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d157      	bne.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e242      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x74>
 80027d6:	4b76      	ldr	r3, [pc, #472]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a75      	ldr	r2, [pc, #468]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x98>
 80027ee:	4b70      	ldr	r3, [pc, #448]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6f      	ldr	r2, [pc, #444]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b6d      	ldr	r3, [pc, #436]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6c      	ldr	r2, [pc, #432]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 8002808:	4b69      	ldr	r3, [pc, #420]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a68      	ldr	r2, [pc, #416]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b66      	ldr	r3, [pc, #408]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a65      	ldr	r2, [pc, #404]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fd9a 	bl	8001360 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe fd96 	bl	8001360 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e207      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b5b      	ldr	r3, [pc, #364]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xc0>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fd86 	bl	8001360 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe fd82 	bl	8001360 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1f3      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b51      	ldr	r3, [pc, #324]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0xe8>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002886:	4b4a      	ldr	r3, [pc, #296]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b47      	ldr	r3, [pc, #284]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b44      	ldr	r3, [pc, #272]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1c7      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4937      	ldr	r1, [pc, #220]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <HAL_RCC_OscConfig+0x244>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7fe fd3b 	bl	8001360 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ee:	f7fe fd37 	bl	8001360 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1a8      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4925      	ldr	r1, [pc, #148]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x244>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fd1a 	bl	8001360 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002930:	f7fe fd16 	bl	8001360 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e187      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d036      	beq.n	80029c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe fcfa 	bl	8001360 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fcf6 	bl	8001360 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e167      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x200>
 800298e:	e01b      	b.n	80029c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe fce3 	bl	8001360 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	e00e      	b.n	80029bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299e:	f7fe fcdf 	bl	8001360 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d907      	bls.n	80029bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e150      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 80029b0:	40023800 	.word	0x40023800
 80029b4:	42470000 	.word	0x42470000
 80029b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4b88      	ldr	r3, [pc, #544]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ea      	bne.n	800299e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8097 	beq.w	8002b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b81      	ldr	r3, [pc, #516]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b7d      	ldr	r3, [pc, #500]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a7c      	ldr	r2, [pc, #496]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b7a      	ldr	r3, [pc, #488]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b77      	ldr	r3, [pc, #476]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b74      	ldr	r3, [pc, #464]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a73      	ldr	r2, [pc, #460]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fc9f 	bl	8001360 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fe fc9b 	bl	8001360 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e10c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b6a      	ldr	r3, [pc, #424]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
 8002a4c:	4b64      	ldr	r3, [pc, #400]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a63      	ldr	r2, [pc, #396]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	e01c      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x30c>
 8002a62:	4b5f      	ldr	r3, [pc, #380]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a5e      	ldr	r2, [pc, #376]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a5b      	ldr	r2, [pc, #364]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a7c:	4b58      	ldr	r3, [pc, #352]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	4a57      	ldr	r2, [pc, #348]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a88:	4b55      	ldr	r3, [pc, #340]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a54      	ldr	r2, [pc, #336]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fc60 	bl	8001360 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fc5c 	bl	8001360 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0cb      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	4b49      	ldr	r3, [pc, #292]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x334>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fc4a 	bl	8001360 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fc46 	bl	8001360 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0b5      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	4a38      	ldr	r2, [pc, #224]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a1 	beq.w	8002c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0e:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d05c      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d141      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b31      	ldr	r3, [pc, #196]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe fc1a 	bl	8001360 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe fc16 	bl	8001360 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e087      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	491b      	ldr	r1, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fbef 	bl	8001360 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b86:	f7fe fbeb 	bl	8001360 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e05c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x416>
 8002ba4:	e054      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fbd8 	bl	8001360 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fbd4 	bl	8001360 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e045      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x444>
 8002bd2:	e03d      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e038      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40007000 	.word	0x40007000
 8002be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x4ec>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d028      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0cc      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b68      	ldr	r3, [pc, #416]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d90c      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b65      	ldr	r3, [pc, #404]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b63      	ldr	r3, [pc, #396]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb4:	4b59      	ldr	r3, [pc, #356]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a58      	ldr	r2, [pc, #352]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ccc:	4b53      	ldr	r3, [pc, #332]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b50      	ldr	r3, [pc, #320]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	494d      	ldr	r1, [pc, #308]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d044      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e067      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3e:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4934      	ldr	r1, [pc, #208]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d50:	f7fe fb06 	bl	8001360 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7fe fb02 	bl	8001360 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e04f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 020c 	and.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1eb      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d20c      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e032      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4916      	ldr	r1, [pc, #88]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	490e      	ldr	r1, [pc, #56]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002de6:	f000 f821 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	490a      	ldr	r1, [pc, #40]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	5ccb      	ldrb	r3, [r1, r3]
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	4a09      	ldr	r2, [pc, #36]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e02:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fa66 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08004b1c 	.word	0x08004b1c
 8002e24:	20000020 	.word	0x20000020
 8002e28:	20000024 	.word	0x20000024

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b094      	sub	sp, #80	@ 0x50
 8002e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e44:	4b79      	ldr	r3, [pc, #484]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x40>
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	f200 80e1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5e:	e0db      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b73      	ldr	r3, [pc, #460]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e62:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e64:	e0db      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e66:	4b73      	ldr	r3, [pc, #460]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e6a:	e0d8      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e74:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e76:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	6139      	str	r1, [r7, #16]
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4651      	mov	r1, sl
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4651      	mov	r1, sl
 8002ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	eb49 0303 	adc.w	r3, r9, r3
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	024b      	lsls	r3, r1, #9
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f28:	4621      	mov	r1, r4
 8002f2a:	024a      	lsls	r2, r1, #9
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f3c:	f7fd f998 	bl	8000270 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f48:	e058      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	2200      	movs	r2, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	4611      	mov	r1, r2
 8002f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	0159      	lsls	r1, r3, #5
 8002f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f76:	0150      	lsls	r0, r2, #5
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f82:	4649      	mov	r1, r9
 8002f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	00eb      	lsls	r3, r5, #3
 8002fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb2:	00e2      	lsls	r2, r4, #3
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	4643      	mov	r3, r8
 8002fba:	18e3      	adds	r3, r4, r3
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	eb45 0303 	adc.w	r3, r5, r3
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	028b      	lsls	r3, r1, #10
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fdc:	4621      	mov	r1, r4
 8002fde:	028a      	lsls	r2, r1, #10
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	61fa      	str	r2, [r7, #28]
 8002fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff0:	f7fd f93e 	bl	8000270 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800300c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800300e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 800301a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003020:	4618      	mov	r0, r3
 8003022:	3750      	adds	r7, #80	@ 0x50
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	00f42400 	.word	0x00f42400
 8003034:	007a1200 	.word	0x007a1200

08003038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_RCC_GetHCLKFreq+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000020 	.word	0x20000020

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003054:	f7ff fff0 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	08004b2c 	.word	0x08004b2c

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800307c:	f7ff ffdc 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0b5b      	lsrs	r3, r3, #13
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	@ (800309c <HAL_RCC_GetPCLK2Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	08004b2c 	.word	0x08004b2c

080030a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e042      	b.n	8003138 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd ffb4 	bl	8001034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2224      	movs	r2, #36	@ 0x24
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fdbd 	bl	8003c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b20      	cmp	r3, #32
 800315e:	d175      	bne.n	800324c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_UART_Transmit+0x2c>
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e06e      	b.n	800324e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2221      	movs	r2, #33	@ 0x21
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800317e:	f7fe f8ef 	bl	8001360 <HAL_GetTick>
 8003182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003198:	d108      	bne.n	80031ac <HAL_UART_Transmit+0x6c>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	e003      	b.n	80031b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031b4:	e02e      	b.n	8003214 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	2180      	movs	r1, #128	@ 0x80
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fb1f 	bl	8003804 <UART_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e03a      	b.n	800324e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	3302      	adds	r3, #2
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	e007      	b.n	8003206 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	3301      	adds	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1cb      	bne.n	80031b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	2140      	movs	r1, #64	@ 0x40
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 faeb 	bl	8003804 <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e006      	b.n	800324e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	4613      	mov	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	d112      	bne.n	8003296 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_UART_Receive_IT+0x26>
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e00b      	b.n	8003298 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	461a      	mov	r2, r3
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fb12 	bl	80038b6 <UART_Start_Receive_IT>
 8003292:	4603      	mov	r3, r0
 8003294:	e000      	b.n	8003298 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003296:	2302      	movs	r3, #2
  }
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b0ba      	sub	sp, #232	@ 0xe8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80032de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_UART_IRQHandler+0x66>
 80032f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fbf2 	bl	8003ae8 <UART_Receive_IT>
      return;
 8003304:	e25b      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80de 	beq.w	80034cc <HAL_UART_IRQHandler+0x22c>
 8003310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003320:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80d1 	beq.w	80034cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_UART_IRQHandler+0xae>
 8003336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800334e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <HAL_UART_IRQHandler+0xd2>
 800335a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	f043 0202 	orr.w	r2, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_UART_IRQHandler+0xf6>
 800337e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d011      	beq.n	80033c6 <HAL_UART_IRQHandler+0x126>
 80033a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f043 0208 	orr.w	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 81f2 	beq.w	80037b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_UART_IRQHandler+0x14e>
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fb7d 	bl	8003ae8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_UART_IRQHandler+0x17a>
 8003412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d04f      	beq.n	80034ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fa85 	bl	800392a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b40      	cmp	r3, #64	@ 0x40
 800342c:	d141      	bne.n	80034b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800344c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3314      	adds	r3, #20
 8003456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800345a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800345e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1d9      	bne.n	800342e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d013      	beq.n	80034aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	4a7e      	ldr	r2, [pc, #504]	@ (8003680 <HAL_UART_IRQHandler+0x3e0>)
 8003488:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe ff7f 	bl	8002392 <HAL_DMA_Abort_IT>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034a4:	4610      	mov	r0, r2
 80034a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	e00e      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f994 	bl	80037d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e00a      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f990 	bl	80037d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	e006      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f98c 	bl	80037d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80034c6:	e175      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c8:	bf00      	nop
    return;
 80034ca:	e173      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f040 814f 	bne.w	8003774 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8148 	beq.w	8003774 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8141 	beq.w	8003774 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003512:	2b40      	cmp	r3, #64	@ 0x40
 8003514:	f040 80b6 	bne.w	8003684 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8145 	beq.w	80037b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003536:	429a      	cmp	r2, r3
 8003538:	f080 813e 	bcs.w	80037b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003542:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354e:	f000 8088 	beq.w	8003662 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003568:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800356c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003570:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800357e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800358a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1d9      	bne.n	8003552 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e1      	bne.n	800359e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003600:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003604:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800360c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003644:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003646:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800364a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e3      	bne.n	8003620 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fe28 	bl	80022b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003670:	b29b      	uxth	r3, r3
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8b7 	bl	80037ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800367e:	e09b      	b.n	80037b8 <HAL_UART_IRQHandler+0x518>
 8003680:	080039f1 	.word	0x080039f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800368c:	b29b      	uxth	r3, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 808e 	beq.w	80037bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80036a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8089 	beq.w	80037bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80036d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e3      	bne.n	80036aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	623b      	str	r3, [r7, #32]
   return(result);
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3314      	adds	r3, #20
 8003702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003706:	633a      	str	r2, [r7, #48]	@ 0x30
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e3      	bne.n	80036e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	60fb      	str	r3, [r7, #12]
   return(result);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0310 	bic.w	r3, r3, #16
 800373e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800374c:	61fa      	str	r2, [r7, #28]
 800374e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	617b      	str	r3, [r7, #20]
   return(result);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e3      	bne.n	8003728 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003766:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f83d 	bl	80037ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003772:	e023      	b.n	80037bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_UART_IRQHandler+0x4f4>
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f943 	bl	8003a18 <UART_Transmit_IT>
    return;
 8003792:	e014      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <HAL_UART_IRQHandler+0x51e>
 80037a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f983 	bl	8003ab8 <UART_EndTransmit_IT>
    return;
 80037b2:	e004      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
    return;
 80037b4:	bf00      	nop
 80037b6:	e002      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
      return;
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
      return;
 80037bc:	bf00      	nop
  }
}
 80037be:	37e8      	adds	r7, #232	@ 0xe8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003814:	e03b      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d037      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7fd fd9f 	bl	8001360 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <UART_WaitOnFlagUntilTimeout+0x30>
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e03a      	b.n	80038ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d023      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b80      	cmp	r3, #128	@ 0x80
 800384a:	d020      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x8a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b40      	cmp	r3, #64	@ 0x40
 8003850:	d01d      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b08      	cmp	r3, #8
 800385e:	d116      	bne.n	800388e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f857 	bl	800392a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2208      	movs	r2, #8
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e00f      	b.n	80038ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d0b4      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	4613      	mov	r3, r2
 80038c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	88fa      	ldrh	r2, [r7, #6]
 80038ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	88fa      	ldrh	r2, [r7, #6]
 80038d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2222      	movs	r2, #34	@ 0x22
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0220 	orr.w	r2, r2, #32
 800391a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800392a:	b480      	push	{r7}
 800392c:	b095      	sub	sp, #84	@ 0x54
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003952:	643a      	str	r2, [r7, #64]	@ 0x40
 8003954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	61fb      	str	r3, [r7, #28]
   return(result);
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800398c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d119      	bne.n	80039d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f023 0310 	bic.w	r3, r3, #16
 80039b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039c2:	61ba      	str	r2, [r7, #24]
 80039c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6979      	ldr	r1, [r7, #20]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	613b      	str	r3, [r7, #16]
   return(result);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e5      	bne.n	80039a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039e4:	bf00      	nop
 80039e6:	3754      	adds	r7, #84	@ 0x54
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff fee4 	bl	80037d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b21      	cmp	r3, #33	@ 0x21
 8003a2a:	d13e      	bne.n	8003aaa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a34:	d114      	bne.n	8003a60 <UART_Transmit_IT+0x48>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d110      	bne.n	8003a60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	621a      	str	r2, [r3, #32]
 8003a5e:	e008      	b.n	8003a72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	1c59      	adds	r1, r3, #1
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6211      	str	r1, [r2, #32]
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aa4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e000      	b.n	8003aac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ace:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fe73 	bl	80037c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	@ 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b22      	cmp	r3, #34	@ 0x22
 8003afa:	f040 80ae 	bne.w	8003c5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b06:	d117      	bne.n	8003b38 <UART_Receive_IT+0x50>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d113      	bne.n	8003b38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b36:	e026      	b.n	8003b86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4a:	d007      	beq.n	8003b5c <UART_Receive_IT+0x74>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <UART_Receive_IT+0x82>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e008      	b.n	8003b7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4619      	mov	r1, r3
 8003b94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d15d      	bne.n	8003c56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0220 	bic.w	r2, r2, #32
 8003ba8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d135      	bne.n	8003c4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f023 0310 	bic.w	r3, r3, #16
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c06:	623a      	str	r2, [r7, #32]
 8003c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e5      	bne.n	8003be6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d10a      	bne.n	8003c3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fdd1 	bl	80037ec <HAL_UARTEx_RxEventCallback>
 8003c4a:	e002      	b.n	8003c52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fc ff69 	bl	8000b24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e002      	b.n	8003c5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
  }
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3730      	adds	r7, #48	@ 0x30
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b0c0      	sub	sp, #256	@ 0x100
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c80:	68d9      	ldr	r1, [r3, #12]
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	ea40 0301 	orr.w	r3, r0, r1
 8003c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cbc:	f021 010c 	bic.w	r1, r1, #12
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cde:	6999      	ldr	r1, [r3, #24]
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	ea40 0301 	orr.w	r3, r0, r1
 8003cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b8f      	ldr	r3, [pc, #572]	@ (8003f30 <UART_SetConfig+0x2cc>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d005      	beq.n	8003d04 <UART_SetConfig+0xa0>
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8003f34 <UART_SetConfig+0x2d0>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d104      	bne.n	8003d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d04:	f7ff f9b8 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8003d08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d0c:	e003      	b.n	8003d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0e:	f7ff f99f 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8003d12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d20:	f040 810c 	bne.w	8003f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d36:	4622      	mov	r2, r4
 8003d38:	462b      	mov	r3, r5
 8003d3a:	1891      	adds	r1, r2, r2
 8003d3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d3e:	415b      	adcs	r3, r3
 8003d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d46:	4621      	mov	r1, r4
 8003d48:	eb12 0801 	adds.w	r8, r2, r1
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	eb43 0901 	adc.w	r9, r3, r1
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d66:	4690      	mov	r8, r2
 8003d68:	4699      	mov	r9, r3
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	eb18 0303 	adds.w	r3, r8, r3
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d74:	462b      	mov	r3, r5
 8003d76:	eb49 0303 	adc.w	r3, r9, r3
 8003d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d92:	460b      	mov	r3, r1
 8003d94:	18db      	adds	r3, r3, r3
 8003d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d98:	4613      	mov	r3, r2
 8003d9a:	eb42 0303 	adc.w	r3, r2, r3
 8003d9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003da8:	f7fc fa62 	bl	8000270 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4b61      	ldr	r3, [pc, #388]	@ (8003f38 <UART_SetConfig+0x2d4>)
 8003db2:	fba3 2302 	umull	r2, r3, r3, r2
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	011c      	lsls	r4, r3, #4
 8003dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	1891      	adds	r1, r2, r2
 8003dd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003dd4:	415b      	adcs	r3, r3
 8003dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ddc:	4641      	mov	r1, r8
 8003dde:	eb12 0a01 	adds.w	sl, r2, r1
 8003de2:	4649      	mov	r1, r9
 8003de4:	eb43 0b01 	adc.w	fp, r3, r1
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfc:	4692      	mov	sl, r2
 8003dfe:	469b      	mov	fp, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	eb1a 0303 	adds.w	r3, sl, r3
 8003e06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	18db      	adds	r3, r3, r3
 8003e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e2e:	4613      	mov	r3, r2
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e3e:	f7fc fa17 	bl	8000270 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	4b3b      	ldr	r3, [pc, #236]	@ (8003f38 <UART_SetConfig+0x2d4>)
 8003e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2264      	movs	r2, #100	@ 0x64
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	1acb      	subs	r3, r1, r3
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e5e:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <UART_SetConfig+0x2d4>)
 8003e60:	fba3 2302 	umull	r2, r3, r3, r2
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e6c:	441c      	add	r4, r3
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e90:	4641      	mov	r1, r8
 8003e92:	1851      	adds	r1, r2, r1
 8003e94:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e96:	4649      	mov	r1, r9
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	00cb      	lsls	r3, r1, #3
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	00ca      	lsls	r2, r1, #3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003edc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	18db      	adds	r3, r3, r3
 8003ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eea:	4613      	mov	r3, r2
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003efa:	f7fc f9b9 	bl	8000270 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <UART_SetConfig+0x2d4>)
 8003f04:	fba3 1302 	umull	r1, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	2164      	movs	r1, #100	@ 0x64
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	3332      	adds	r3, #50	@ 0x32
 8003f16:	4a08      	ldr	r2, [pc, #32]	@ (8003f38 <UART_SetConfig+0x2d4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 0207 	and.w	r2, r3, #7
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4422      	add	r2, r4
 8003f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f2c:	e106      	b.n	800413c <UART_SetConfig+0x4d8>
 8003f2e:	bf00      	nop
 8003f30:	40011000 	.word	0x40011000
 8003f34:	40011400 	.word	0x40011400
 8003f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f4e:	4642      	mov	r2, r8
 8003f50:	464b      	mov	r3, r9
 8003f52:	1891      	adds	r1, r2, r2
 8003f54:	6239      	str	r1, [r7, #32]
 8003f56:	415b      	adcs	r3, r3
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f5e:	4641      	mov	r1, r8
 8003f60:	1854      	adds	r4, r2, r1
 8003f62:	4649      	mov	r1, r9
 8003f64:	eb43 0501 	adc.w	r5, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	00eb      	lsls	r3, r5, #3
 8003f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f76:	00e2      	lsls	r2, r4, #3
 8003f78:	4614      	mov	r4, r2
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	18e3      	adds	r3, r4, r3
 8003f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f84:	464b      	mov	r3, r9
 8003f86:	eb45 0303 	adc.w	r3, r5, r3
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003faa:	4629      	mov	r1, r5
 8003fac:	008b      	lsls	r3, r1, #2
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	008a      	lsls	r2, r1, #2
 8003fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fbc:	f7fc f958 	bl	8000270 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4b60      	ldr	r3, [pc, #384]	@ (8004148 <UART_SetConfig+0x4e4>)
 8003fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	011c      	lsls	r4, r3, #4
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	61b9      	str	r1, [r7, #24]
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	1851      	adds	r1, r2, r1
 8003ff4:	6139      	str	r1, [r7, #16]
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	414b      	adcs	r3, r1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004008:	4659      	mov	r1, fp
 800400a:	00cb      	lsls	r3, r1, #3
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004012:	4651      	mov	r1, sl
 8004014:	00ca      	lsls	r2, r1, #3
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	4603      	mov	r3, r0
 800401c:	4642      	mov	r2, r8
 800401e:	189b      	adds	r3, r3, r2
 8004020:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004024:	464b      	mov	r3, r9
 8004026:	460a      	mov	r2, r1
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	67bb      	str	r3, [r7, #120]	@ 0x78
 800403a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004048:	4649      	mov	r1, r9
 800404a:	008b      	lsls	r3, r1, #2
 800404c:	4641      	mov	r1, r8
 800404e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004052:	4641      	mov	r1, r8
 8004054:	008a      	lsls	r2, r1, #2
 8004056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800405a:	f7fc f909 	bl	8000270 <__aeabi_uldivmod>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4611      	mov	r1, r2
 8004064:	4b38      	ldr	r3, [pc, #224]	@ (8004148 <UART_SetConfig+0x4e4>)
 8004066:	fba3 2301 	umull	r2, r3, r3, r1
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2264      	movs	r2, #100	@ 0x64
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	1acb      	subs	r3, r1, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	@ 0x32
 8004078:	4a33      	ldr	r2, [pc, #204]	@ (8004148 <UART_SetConfig+0x4e4>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004084:	441c      	add	r4, r3
 8004086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800408a:	2200      	movs	r2, #0
 800408c:	673b      	str	r3, [r7, #112]	@ 0x70
 800408e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	415b      	adcs	r3, r3
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040d6:	464b      	mov	r3, r9
 80040d8:	460a      	mov	r2, r1
 80040da:	eb42 0303 	adc.w	r3, r2, r3
 80040de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040f8:	4649      	mov	r1, r9
 80040fa:	008b      	lsls	r3, r1, #2
 80040fc:	4641      	mov	r1, r8
 80040fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004102:	4641      	mov	r1, r8
 8004104:	008a      	lsls	r2, r1, #2
 8004106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800410a:	f7fc f8b1 	bl	8000270 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <UART_SetConfig+0x4e4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	@ 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	3332      	adds	r3, #50	@ 0x32
 8004126:	4a08      	ldr	r2, [pc, #32]	@ (8004148 <UART_SetConfig+0x4e4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4422      	add	r2, r4
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004142:	46bd      	mov	sp, r7
 8004144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004148:	51eb851f 	.word	0x51eb851f

0800414c <siprintf>:
 800414c:	b40e      	push	{r1, r2, r3}
 800414e:	b500      	push	{lr}
 8004150:	b09c      	sub	sp, #112	@ 0x70
 8004152:	ab1d      	add	r3, sp, #116	@ 0x74
 8004154:	9002      	str	r0, [sp, #8]
 8004156:	9006      	str	r0, [sp, #24]
 8004158:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800415c:	4809      	ldr	r0, [pc, #36]	@ (8004184 <siprintf+0x38>)
 800415e:	9107      	str	r1, [sp, #28]
 8004160:	9104      	str	r1, [sp, #16]
 8004162:	4909      	ldr	r1, [pc, #36]	@ (8004188 <siprintf+0x3c>)
 8004164:	f853 2b04 	ldr.w	r2, [r3], #4
 8004168:	9105      	str	r1, [sp, #20]
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	a902      	add	r1, sp, #8
 8004170:	f000 f994 	bl	800449c <_svfiprintf_r>
 8004174:	9b02      	ldr	r3, [sp, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	b01c      	add	sp, #112	@ 0x70
 800417c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004180:	b003      	add	sp, #12
 8004182:	4770      	bx	lr
 8004184:	2000002c 	.word	0x2000002c
 8004188:	ffff0208 	.word	0xffff0208

0800418c <memset>:
 800418c:	4402      	add	r2, r0
 800418e:	4603      	mov	r3, r0
 8004190:	4293      	cmp	r3, r2
 8004192:	d100      	bne.n	8004196 <memset+0xa>
 8004194:	4770      	bx	lr
 8004196:	f803 1b01 	strb.w	r1, [r3], #1
 800419a:	e7f9      	b.n	8004190 <memset+0x4>

0800419c <__errno>:
 800419c:	4b01      	ldr	r3, [pc, #4]	@ (80041a4 <__errno+0x8>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	2000002c 	.word	0x2000002c

080041a8 <__libc_init_array>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4d0d      	ldr	r5, [pc, #52]	@ (80041e0 <__libc_init_array+0x38>)
 80041ac:	4c0d      	ldr	r4, [pc, #52]	@ (80041e4 <__libc_init_array+0x3c>)
 80041ae:	1b64      	subs	r4, r4, r5
 80041b0:	10a4      	asrs	r4, r4, #2
 80041b2:	2600      	movs	r6, #0
 80041b4:	42a6      	cmp	r6, r4
 80041b6:	d109      	bne.n	80041cc <__libc_init_array+0x24>
 80041b8:	4d0b      	ldr	r5, [pc, #44]	@ (80041e8 <__libc_init_array+0x40>)
 80041ba:	4c0c      	ldr	r4, [pc, #48]	@ (80041ec <__libc_init_array+0x44>)
 80041bc:	f000 fc66 	bl	8004a8c <_init>
 80041c0:	1b64      	subs	r4, r4, r5
 80041c2:	10a4      	asrs	r4, r4, #2
 80041c4:	2600      	movs	r6, #0
 80041c6:	42a6      	cmp	r6, r4
 80041c8:	d105      	bne.n	80041d6 <__libc_init_array+0x2e>
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d0:	4798      	blx	r3
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7ee      	b.n	80041b4 <__libc_init_array+0xc>
 80041d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041da:	4798      	blx	r3
 80041dc:	3601      	adds	r6, #1
 80041de:	e7f2      	b.n	80041c6 <__libc_init_array+0x1e>
 80041e0:	08004b70 	.word	0x08004b70
 80041e4:	08004b70 	.word	0x08004b70
 80041e8:	08004b70 	.word	0x08004b70
 80041ec:	08004b74 	.word	0x08004b74

080041f0 <__retarget_lock_acquire_recursive>:
 80041f0:	4770      	bx	lr

080041f2 <__retarget_lock_release_recursive>:
 80041f2:	4770      	bx	lr

080041f4 <_free_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4605      	mov	r5, r0
 80041f8:	2900      	cmp	r1, #0
 80041fa:	d041      	beq.n	8004280 <_free_r+0x8c>
 80041fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004200:	1f0c      	subs	r4, r1, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfb8      	it	lt
 8004206:	18e4      	addlt	r4, r4, r3
 8004208:	f000 f8e0 	bl	80043cc <__malloc_lock>
 800420c:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <_free_r+0x90>)
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	b933      	cbnz	r3, 8004220 <_free_r+0x2c>
 8004212:	6063      	str	r3, [r4, #4]
 8004214:	6014      	str	r4, [r2, #0]
 8004216:	4628      	mov	r0, r5
 8004218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800421c:	f000 b8dc 	b.w	80043d8 <__malloc_unlock>
 8004220:	42a3      	cmp	r3, r4
 8004222:	d908      	bls.n	8004236 <_free_r+0x42>
 8004224:	6820      	ldr	r0, [r4, #0]
 8004226:	1821      	adds	r1, r4, r0
 8004228:	428b      	cmp	r3, r1
 800422a:	bf01      	itttt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	1809      	addeq	r1, r1, r0
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	e7ed      	b.n	8004212 <_free_r+0x1e>
 8004236:	461a      	mov	r2, r3
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b10b      	cbz	r3, 8004240 <_free_r+0x4c>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d9fa      	bls.n	8004236 <_free_r+0x42>
 8004240:	6811      	ldr	r1, [r2, #0]
 8004242:	1850      	adds	r0, r2, r1
 8004244:	42a0      	cmp	r0, r4
 8004246:	d10b      	bne.n	8004260 <_free_r+0x6c>
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	4401      	add	r1, r0
 800424c:	1850      	adds	r0, r2, r1
 800424e:	4283      	cmp	r3, r0
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	d1e0      	bne.n	8004216 <_free_r+0x22>
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	6053      	str	r3, [r2, #4]
 800425a:	4408      	add	r0, r1
 800425c:	6010      	str	r0, [r2, #0]
 800425e:	e7da      	b.n	8004216 <_free_r+0x22>
 8004260:	d902      	bls.n	8004268 <_free_r+0x74>
 8004262:	230c      	movs	r3, #12
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	e7d6      	b.n	8004216 <_free_r+0x22>
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	1821      	adds	r1, r4, r0
 800426c:	428b      	cmp	r3, r1
 800426e:	bf04      	itt	eq
 8004270:	6819      	ldreq	r1, [r3, #0]
 8004272:	685b      	ldreq	r3, [r3, #4]
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	bf04      	itt	eq
 8004278:	1809      	addeq	r1, r1, r0
 800427a:	6021      	streq	r1, [r4, #0]
 800427c:	6054      	str	r4, [r2, #4]
 800427e:	e7ca      	b.n	8004216 <_free_r+0x22>
 8004280:	bd38      	pop	{r3, r4, r5, pc}
 8004282:	bf00      	nop
 8004284:	20001370 	.word	0x20001370

08004288 <sbrk_aligned>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4e0f      	ldr	r6, [pc, #60]	@ (80042c8 <sbrk_aligned+0x40>)
 800428c:	460c      	mov	r4, r1
 800428e:	6831      	ldr	r1, [r6, #0]
 8004290:	4605      	mov	r5, r0
 8004292:	b911      	cbnz	r1, 800429a <sbrk_aligned+0x12>
 8004294:	f000 fba6 	bl	80049e4 <_sbrk_r>
 8004298:	6030      	str	r0, [r6, #0]
 800429a:	4621      	mov	r1, r4
 800429c:	4628      	mov	r0, r5
 800429e:	f000 fba1 	bl	80049e4 <_sbrk_r>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	d103      	bne.n	80042ae <sbrk_aligned+0x26>
 80042a6:	f04f 34ff 	mov.w	r4, #4294967295
 80042aa:	4620      	mov	r0, r4
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
 80042ae:	1cc4      	adds	r4, r0, #3
 80042b0:	f024 0403 	bic.w	r4, r4, #3
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d0f8      	beq.n	80042aa <sbrk_aligned+0x22>
 80042b8:	1a21      	subs	r1, r4, r0
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 fb92 	bl	80049e4 <_sbrk_r>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d1f2      	bne.n	80042aa <sbrk_aligned+0x22>
 80042c4:	e7ef      	b.n	80042a6 <sbrk_aligned+0x1e>
 80042c6:	bf00      	nop
 80042c8:	2000136c 	.word	0x2000136c

080042cc <_malloc_r>:
 80042cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d0:	1ccd      	adds	r5, r1, #3
 80042d2:	f025 0503 	bic.w	r5, r5, #3
 80042d6:	3508      	adds	r5, #8
 80042d8:	2d0c      	cmp	r5, #12
 80042da:	bf38      	it	cc
 80042dc:	250c      	movcc	r5, #12
 80042de:	2d00      	cmp	r5, #0
 80042e0:	4606      	mov	r6, r0
 80042e2:	db01      	blt.n	80042e8 <_malloc_r+0x1c>
 80042e4:	42a9      	cmp	r1, r5
 80042e6:	d904      	bls.n	80042f2 <_malloc_r+0x26>
 80042e8:	230c      	movs	r3, #12
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	2000      	movs	r0, #0
 80042ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043c8 <_malloc_r+0xfc>
 80042f6:	f000 f869 	bl	80043cc <__malloc_lock>
 80042fa:	f8d8 3000 	ldr.w	r3, [r8]
 80042fe:	461c      	mov	r4, r3
 8004300:	bb44      	cbnz	r4, 8004354 <_malloc_r+0x88>
 8004302:	4629      	mov	r1, r5
 8004304:	4630      	mov	r0, r6
 8004306:	f7ff ffbf 	bl	8004288 <sbrk_aligned>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	4604      	mov	r4, r0
 800430e:	d158      	bne.n	80043c2 <_malloc_r+0xf6>
 8004310:	f8d8 4000 	ldr.w	r4, [r8]
 8004314:	4627      	mov	r7, r4
 8004316:	2f00      	cmp	r7, #0
 8004318:	d143      	bne.n	80043a2 <_malloc_r+0xd6>
 800431a:	2c00      	cmp	r4, #0
 800431c:	d04b      	beq.n	80043b6 <_malloc_r+0xea>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	4639      	mov	r1, r7
 8004322:	4630      	mov	r0, r6
 8004324:	eb04 0903 	add.w	r9, r4, r3
 8004328:	f000 fb5c 	bl	80049e4 <_sbrk_r>
 800432c:	4581      	cmp	r9, r0
 800432e:	d142      	bne.n	80043b6 <_malloc_r+0xea>
 8004330:	6821      	ldr	r1, [r4, #0]
 8004332:	1a6d      	subs	r5, r5, r1
 8004334:	4629      	mov	r1, r5
 8004336:	4630      	mov	r0, r6
 8004338:	f7ff ffa6 	bl	8004288 <sbrk_aligned>
 800433c:	3001      	adds	r0, #1
 800433e:	d03a      	beq.n	80043b6 <_malloc_r+0xea>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	442b      	add	r3, r5
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	f8d8 3000 	ldr.w	r3, [r8]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	bb62      	cbnz	r2, 80043a8 <_malloc_r+0xdc>
 800434e:	f8c8 7000 	str.w	r7, [r8]
 8004352:	e00f      	b.n	8004374 <_malloc_r+0xa8>
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	1b52      	subs	r2, r2, r5
 8004358:	d420      	bmi.n	800439c <_malloc_r+0xd0>
 800435a:	2a0b      	cmp	r2, #11
 800435c:	d917      	bls.n	800438e <_malloc_r+0xc2>
 800435e:	1961      	adds	r1, r4, r5
 8004360:	42a3      	cmp	r3, r4
 8004362:	6025      	str	r5, [r4, #0]
 8004364:	bf18      	it	ne
 8004366:	6059      	strne	r1, [r3, #4]
 8004368:	6863      	ldr	r3, [r4, #4]
 800436a:	bf08      	it	eq
 800436c:	f8c8 1000 	streq.w	r1, [r8]
 8004370:	5162      	str	r2, [r4, r5]
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	4630      	mov	r0, r6
 8004376:	f000 f82f 	bl	80043d8 <__malloc_unlock>
 800437a:	f104 000b 	add.w	r0, r4, #11
 800437e:	1d23      	adds	r3, r4, #4
 8004380:	f020 0007 	bic.w	r0, r0, #7
 8004384:	1ac2      	subs	r2, r0, r3
 8004386:	bf1c      	itt	ne
 8004388:	1a1b      	subne	r3, r3, r0
 800438a:	50a3      	strne	r3, [r4, r2]
 800438c:	e7af      	b.n	80042ee <_malloc_r+0x22>
 800438e:	6862      	ldr	r2, [r4, #4]
 8004390:	42a3      	cmp	r3, r4
 8004392:	bf0c      	ite	eq
 8004394:	f8c8 2000 	streq.w	r2, [r8]
 8004398:	605a      	strne	r2, [r3, #4]
 800439a:	e7eb      	b.n	8004374 <_malloc_r+0xa8>
 800439c:	4623      	mov	r3, r4
 800439e:	6864      	ldr	r4, [r4, #4]
 80043a0:	e7ae      	b.n	8004300 <_malloc_r+0x34>
 80043a2:	463c      	mov	r4, r7
 80043a4:	687f      	ldr	r7, [r7, #4]
 80043a6:	e7b6      	b.n	8004316 <_malloc_r+0x4a>
 80043a8:	461a      	mov	r2, r3
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	d1fb      	bne.n	80043a8 <_malloc_r+0xdc>
 80043b0:	2300      	movs	r3, #0
 80043b2:	6053      	str	r3, [r2, #4]
 80043b4:	e7de      	b.n	8004374 <_malloc_r+0xa8>
 80043b6:	230c      	movs	r3, #12
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	4630      	mov	r0, r6
 80043bc:	f000 f80c 	bl	80043d8 <__malloc_unlock>
 80043c0:	e794      	b.n	80042ec <_malloc_r+0x20>
 80043c2:	6005      	str	r5, [r0, #0]
 80043c4:	e7d6      	b.n	8004374 <_malloc_r+0xa8>
 80043c6:	bf00      	nop
 80043c8:	20001370 	.word	0x20001370

080043cc <__malloc_lock>:
 80043cc:	4801      	ldr	r0, [pc, #4]	@ (80043d4 <__malloc_lock+0x8>)
 80043ce:	f7ff bf0f 	b.w	80041f0 <__retarget_lock_acquire_recursive>
 80043d2:	bf00      	nop
 80043d4:	20001368 	.word	0x20001368

080043d8 <__malloc_unlock>:
 80043d8:	4801      	ldr	r0, [pc, #4]	@ (80043e0 <__malloc_unlock+0x8>)
 80043da:	f7ff bf0a 	b.w	80041f2 <__retarget_lock_release_recursive>
 80043de:	bf00      	nop
 80043e0:	20001368 	.word	0x20001368

080043e4 <__ssputs_r>:
 80043e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	688e      	ldr	r6, [r1, #8]
 80043ea:	461f      	mov	r7, r3
 80043ec:	42be      	cmp	r6, r7
 80043ee:	680b      	ldr	r3, [r1, #0]
 80043f0:	4682      	mov	sl, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	4690      	mov	r8, r2
 80043f6:	d82d      	bhi.n	8004454 <__ssputs_r+0x70>
 80043f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004400:	d026      	beq.n	8004450 <__ssputs_r+0x6c>
 8004402:	6965      	ldr	r5, [r4, #20]
 8004404:	6909      	ldr	r1, [r1, #16]
 8004406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800440a:	eba3 0901 	sub.w	r9, r3, r1
 800440e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004412:	1c7b      	adds	r3, r7, #1
 8004414:	444b      	add	r3, r9
 8004416:	106d      	asrs	r5, r5, #1
 8004418:	429d      	cmp	r5, r3
 800441a:	bf38      	it	cc
 800441c:	461d      	movcc	r5, r3
 800441e:	0553      	lsls	r3, r2, #21
 8004420:	d527      	bpl.n	8004472 <__ssputs_r+0x8e>
 8004422:	4629      	mov	r1, r5
 8004424:	f7ff ff52 	bl	80042cc <_malloc_r>
 8004428:	4606      	mov	r6, r0
 800442a:	b360      	cbz	r0, 8004486 <__ssputs_r+0xa2>
 800442c:	6921      	ldr	r1, [r4, #16]
 800442e:	464a      	mov	r2, r9
 8004430:	f000 fae8 	bl	8004a04 <memcpy>
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800443a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443e:	81a3      	strh	r3, [r4, #12]
 8004440:	6126      	str	r6, [r4, #16]
 8004442:	6165      	str	r5, [r4, #20]
 8004444:	444e      	add	r6, r9
 8004446:	eba5 0509 	sub.w	r5, r5, r9
 800444a:	6026      	str	r6, [r4, #0]
 800444c:	60a5      	str	r5, [r4, #8]
 800444e:	463e      	mov	r6, r7
 8004450:	42be      	cmp	r6, r7
 8004452:	d900      	bls.n	8004456 <__ssputs_r+0x72>
 8004454:	463e      	mov	r6, r7
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	4632      	mov	r2, r6
 800445a:	4641      	mov	r1, r8
 800445c:	f000 faa8 	bl	80049b0 <memmove>
 8004460:	68a3      	ldr	r3, [r4, #8]
 8004462:	1b9b      	subs	r3, r3, r6
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	4433      	add	r3, r6
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	2000      	movs	r0, #0
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	462a      	mov	r2, r5
 8004474:	f000 fad4 	bl	8004a20 <_realloc_r>
 8004478:	4606      	mov	r6, r0
 800447a:	2800      	cmp	r0, #0
 800447c:	d1e0      	bne.n	8004440 <__ssputs_r+0x5c>
 800447e:	6921      	ldr	r1, [r4, #16]
 8004480:	4650      	mov	r0, sl
 8004482:	f7ff feb7 	bl	80041f4 <_free_r>
 8004486:	230c      	movs	r3, #12
 8004488:	f8ca 3000 	str.w	r3, [sl]
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004492:	81a3      	strh	r3, [r4, #12]
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	e7e9      	b.n	800446e <__ssputs_r+0x8a>
	...

0800449c <_svfiprintf_r>:
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	4698      	mov	r8, r3
 80044a2:	898b      	ldrh	r3, [r1, #12]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	b09d      	sub	sp, #116	@ 0x74
 80044a8:	4607      	mov	r7, r0
 80044aa:	460d      	mov	r5, r1
 80044ac:	4614      	mov	r4, r2
 80044ae:	d510      	bpl.n	80044d2 <_svfiprintf_r+0x36>
 80044b0:	690b      	ldr	r3, [r1, #16]
 80044b2:	b973      	cbnz	r3, 80044d2 <_svfiprintf_r+0x36>
 80044b4:	2140      	movs	r1, #64	@ 0x40
 80044b6:	f7ff ff09 	bl	80042cc <_malloc_r>
 80044ba:	6028      	str	r0, [r5, #0]
 80044bc:	6128      	str	r0, [r5, #16]
 80044be:	b930      	cbnz	r0, 80044ce <_svfiprintf_r+0x32>
 80044c0:	230c      	movs	r3, #12
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	b01d      	add	sp, #116	@ 0x74
 80044ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ce:	2340      	movs	r3, #64	@ 0x40
 80044d0:	616b      	str	r3, [r5, #20]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044d6:	2320      	movs	r3, #32
 80044d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80044e0:	2330      	movs	r3, #48	@ 0x30
 80044e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004680 <_svfiprintf_r+0x1e4>
 80044e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044ea:	f04f 0901 	mov.w	r9, #1
 80044ee:	4623      	mov	r3, r4
 80044f0:	469a      	mov	sl, r3
 80044f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f6:	b10a      	cbz	r2, 80044fc <_svfiprintf_r+0x60>
 80044f8:	2a25      	cmp	r2, #37	@ 0x25
 80044fa:	d1f9      	bne.n	80044f0 <_svfiprintf_r+0x54>
 80044fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004500:	d00b      	beq.n	800451a <_svfiprintf_r+0x7e>
 8004502:	465b      	mov	r3, fp
 8004504:	4622      	mov	r2, r4
 8004506:	4629      	mov	r1, r5
 8004508:	4638      	mov	r0, r7
 800450a:	f7ff ff6b 	bl	80043e4 <__ssputs_r>
 800450e:	3001      	adds	r0, #1
 8004510:	f000 80a7 	beq.w	8004662 <_svfiprintf_r+0x1c6>
 8004514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004516:	445a      	add	r2, fp
 8004518:	9209      	str	r2, [sp, #36]	@ 0x24
 800451a:	f89a 3000 	ldrb.w	r3, [sl]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 809f 	beq.w	8004662 <_svfiprintf_r+0x1c6>
 8004524:	2300      	movs	r3, #0
 8004526:	f04f 32ff 	mov.w	r2, #4294967295
 800452a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800452e:	f10a 0a01 	add.w	sl, sl, #1
 8004532:	9304      	str	r3, [sp, #16]
 8004534:	9307      	str	r3, [sp, #28]
 8004536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800453a:	931a      	str	r3, [sp, #104]	@ 0x68
 800453c:	4654      	mov	r4, sl
 800453e:	2205      	movs	r2, #5
 8004540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004544:	484e      	ldr	r0, [pc, #312]	@ (8004680 <_svfiprintf_r+0x1e4>)
 8004546:	f7fb fe43 	bl	80001d0 <memchr>
 800454a:	9a04      	ldr	r2, [sp, #16]
 800454c:	b9d8      	cbnz	r0, 8004586 <_svfiprintf_r+0xea>
 800454e:	06d0      	lsls	r0, r2, #27
 8004550:	bf44      	itt	mi
 8004552:	2320      	movmi	r3, #32
 8004554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004558:	0711      	lsls	r1, r2, #28
 800455a:	bf44      	itt	mi
 800455c:	232b      	movmi	r3, #43	@ 0x2b
 800455e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004562:	f89a 3000 	ldrb.w	r3, [sl]
 8004566:	2b2a      	cmp	r3, #42	@ 0x2a
 8004568:	d015      	beq.n	8004596 <_svfiprintf_r+0xfa>
 800456a:	9a07      	ldr	r2, [sp, #28]
 800456c:	4654      	mov	r4, sl
 800456e:	2000      	movs	r0, #0
 8004570:	f04f 0c0a 	mov.w	ip, #10
 8004574:	4621      	mov	r1, r4
 8004576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800457a:	3b30      	subs	r3, #48	@ 0x30
 800457c:	2b09      	cmp	r3, #9
 800457e:	d94b      	bls.n	8004618 <_svfiprintf_r+0x17c>
 8004580:	b1b0      	cbz	r0, 80045b0 <_svfiprintf_r+0x114>
 8004582:	9207      	str	r2, [sp, #28]
 8004584:	e014      	b.n	80045b0 <_svfiprintf_r+0x114>
 8004586:	eba0 0308 	sub.w	r3, r0, r8
 800458a:	fa09 f303 	lsl.w	r3, r9, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	46a2      	mov	sl, r4
 8004594:	e7d2      	b.n	800453c <_svfiprintf_r+0xa0>
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	1d19      	adds	r1, r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	9103      	str	r1, [sp, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bfbb      	ittet	lt
 80045a2:	425b      	neglt	r3, r3
 80045a4:	f042 0202 	orrlt.w	r2, r2, #2
 80045a8:	9307      	strge	r3, [sp, #28]
 80045aa:	9307      	strlt	r3, [sp, #28]
 80045ac:	bfb8      	it	lt
 80045ae:	9204      	strlt	r2, [sp, #16]
 80045b0:	7823      	ldrb	r3, [r4, #0]
 80045b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045b4:	d10a      	bne.n	80045cc <_svfiprintf_r+0x130>
 80045b6:	7863      	ldrb	r3, [r4, #1]
 80045b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ba:	d132      	bne.n	8004622 <_svfiprintf_r+0x186>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	9203      	str	r2, [sp, #12]
 80045c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045c8:	3402      	adds	r4, #2
 80045ca:	9305      	str	r3, [sp, #20]
 80045cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004690 <_svfiprintf_r+0x1f4>
 80045d0:	7821      	ldrb	r1, [r4, #0]
 80045d2:	2203      	movs	r2, #3
 80045d4:	4650      	mov	r0, sl
 80045d6:	f7fb fdfb 	bl	80001d0 <memchr>
 80045da:	b138      	cbz	r0, 80045ec <_svfiprintf_r+0x150>
 80045dc:	9b04      	ldr	r3, [sp, #16]
 80045de:	eba0 000a 	sub.w	r0, r0, sl
 80045e2:	2240      	movs	r2, #64	@ 0x40
 80045e4:	4082      	lsls	r2, r0
 80045e6:	4313      	orrs	r3, r2
 80045e8:	3401      	adds	r4, #1
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f0:	4824      	ldr	r0, [pc, #144]	@ (8004684 <_svfiprintf_r+0x1e8>)
 80045f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045f6:	2206      	movs	r2, #6
 80045f8:	f7fb fdea 	bl	80001d0 <memchr>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d036      	beq.n	800466e <_svfiprintf_r+0x1d2>
 8004600:	4b21      	ldr	r3, [pc, #132]	@ (8004688 <_svfiprintf_r+0x1ec>)
 8004602:	bb1b      	cbnz	r3, 800464c <_svfiprintf_r+0x1b0>
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	3307      	adds	r3, #7
 8004608:	f023 0307 	bic.w	r3, r3, #7
 800460c:	3308      	adds	r3, #8
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004612:	4433      	add	r3, r6
 8004614:	9309      	str	r3, [sp, #36]	@ 0x24
 8004616:	e76a      	b.n	80044ee <_svfiprintf_r+0x52>
 8004618:	fb0c 3202 	mla	r2, ip, r2, r3
 800461c:	460c      	mov	r4, r1
 800461e:	2001      	movs	r0, #1
 8004620:	e7a8      	b.n	8004574 <_svfiprintf_r+0xd8>
 8004622:	2300      	movs	r3, #0
 8004624:	3401      	adds	r4, #1
 8004626:	9305      	str	r3, [sp, #20]
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0c0a 	mov.w	ip, #10
 800462e:	4620      	mov	r0, r4
 8004630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004634:	3a30      	subs	r2, #48	@ 0x30
 8004636:	2a09      	cmp	r2, #9
 8004638:	d903      	bls.n	8004642 <_svfiprintf_r+0x1a6>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0c6      	beq.n	80045cc <_svfiprintf_r+0x130>
 800463e:	9105      	str	r1, [sp, #20]
 8004640:	e7c4      	b.n	80045cc <_svfiprintf_r+0x130>
 8004642:	fb0c 2101 	mla	r1, ip, r1, r2
 8004646:	4604      	mov	r4, r0
 8004648:	2301      	movs	r3, #1
 800464a:	e7f0      	b.n	800462e <_svfiprintf_r+0x192>
 800464c:	ab03      	add	r3, sp, #12
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	462a      	mov	r2, r5
 8004652:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <_svfiprintf_r+0x1f0>)
 8004654:	a904      	add	r1, sp, #16
 8004656:	4638      	mov	r0, r7
 8004658:	f3af 8000 	nop.w
 800465c:	1c42      	adds	r2, r0, #1
 800465e:	4606      	mov	r6, r0
 8004660:	d1d6      	bne.n	8004610 <_svfiprintf_r+0x174>
 8004662:	89ab      	ldrh	r3, [r5, #12]
 8004664:	065b      	lsls	r3, r3, #25
 8004666:	f53f af2d 	bmi.w	80044c4 <_svfiprintf_r+0x28>
 800466a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800466c:	e72c      	b.n	80044c8 <_svfiprintf_r+0x2c>
 800466e:	ab03      	add	r3, sp, #12
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	462a      	mov	r2, r5
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <_svfiprintf_r+0x1f0>)
 8004676:	a904      	add	r1, sp, #16
 8004678:	4638      	mov	r0, r7
 800467a:	f000 f879 	bl	8004770 <_printf_i>
 800467e:	e7ed      	b.n	800465c <_svfiprintf_r+0x1c0>
 8004680:	08004b34 	.word	0x08004b34
 8004684:	08004b3e 	.word	0x08004b3e
 8004688:	00000000 	.word	0x00000000
 800468c:	080043e5 	.word	0x080043e5
 8004690:	08004b3a 	.word	0x08004b3a

08004694 <_printf_common>:
 8004694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	4616      	mov	r6, r2
 800469a:	4698      	mov	r8, r3
 800469c:	688a      	ldr	r2, [r1, #8]
 800469e:	690b      	ldr	r3, [r1, #16]
 80046a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bfb8      	it	lt
 80046a8:	4613      	movlt	r3, r2
 80046aa:	6033      	str	r3, [r6, #0]
 80046ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046b0:	4607      	mov	r7, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	b10a      	cbz	r2, 80046ba <_printf_common+0x26>
 80046b6:	3301      	adds	r3, #1
 80046b8:	6033      	str	r3, [r6, #0]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	0699      	lsls	r1, r3, #26
 80046be:	bf42      	ittt	mi
 80046c0:	6833      	ldrmi	r3, [r6, #0]
 80046c2:	3302      	addmi	r3, #2
 80046c4:	6033      	strmi	r3, [r6, #0]
 80046c6:	6825      	ldr	r5, [r4, #0]
 80046c8:	f015 0506 	ands.w	r5, r5, #6
 80046cc:	d106      	bne.n	80046dc <_printf_common+0x48>
 80046ce:	f104 0a19 	add.w	sl, r4, #25
 80046d2:	68e3      	ldr	r3, [r4, #12]
 80046d4:	6832      	ldr	r2, [r6, #0]
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	42ab      	cmp	r3, r5
 80046da:	dc26      	bgt.n	800472a <_printf_common+0x96>
 80046dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	3b00      	subs	r3, #0
 80046e4:	bf18      	it	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	0692      	lsls	r2, r2, #26
 80046ea:	d42b      	bmi.n	8004744 <_printf_common+0xb0>
 80046ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046f0:	4641      	mov	r1, r8
 80046f2:	4638      	mov	r0, r7
 80046f4:	47c8      	blx	r9
 80046f6:	3001      	adds	r0, #1
 80046f8:	d01e      	beq.n	8004738 <_printf_common+0xa4>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	6922      	ldr	r2, [r4, #16]
 80046fe:	f003 0306 	and.w	r3, r3, #6
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf02      	ittt	eq
 8004706:	68e5      	ldreq	r5, [r4, #12]
 8004708:	6833      	ldreq	r3, [r6, #0]
 800470a:	1aed      	subeq	r5, r5, r3
 800470c:	68a3      	ldr	r3, [r4, #8]
 800470e:	bf0c      	ite	eq
 8004710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004714:	2500      	movne	r5, #0
 8004716:	4293      	cmp	r3, r2
 8004718:	bfc4      	itt	gt
 800471a:	1a9b      	subgt	r3, r3, r2
 800471c:	18ed      	addgt	r5, r5, r3
 800471e:	2600      	movs	r6, #0
 8004720:	341a      	adds	r4, #26
 8004722:	42b5      	cmp	r5, r6
 8004724:	d11a      	bne.n	800475c <_printf_common+0xc8>
 8004726:	2000      	movs	r0, #0
 8004728:	e008      	b.n	800473c <_printf_common+0xa8>
 800472a:	2301      	movs	r3, #1
 800472c:	4652      	mov	r2, sl
 800472e:	4641      	mov	r1, r8
 8004730:	4638      	mov	r0, r7
 8004732:	47c8      	blx	r9
 8004734:	3001      	adds	r0, #1
 8004736:	d103      	bne.n	8004740 <_printf_common+0xac>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	3501      	adds	r5, #1
 8004742:	e7c6      	b.n	80046d2 <_printf_common+0x3e>
 8004744:	18e1      	adds	r1, r4, r3
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	2030      	movs	r0, #48	@ 0x30
 800474a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800474e:	4422      	add	r2, r4
 8004750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004758:	3302      	adds	r3, #2
 800475a:	e7c7      	b.n	80046ec <_printf_common+0x58>
 800475c:	2301      	movs	r3, #1
 800475e:	4622      	mov	r2, r4
 8004760:	4641      	mov	r1, r8
 8004762:	4638      	mov	r0, r7
 8004764:	47c8      	blx	r9
 8004766:	3001      	adds	r0, #1
 8004768:	d0e6      	beq.n	8004738 <_printf_common+0xa4>
 800476a:	3601      	adds	r6, #1
 800476c:	e7d9      	b.n	8004722 <_printf_common+0x8e>
	...

08004770 <_printf_i>:
 8004770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	7e0f      	ldrb	r7, [r1, #24]
 8004776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004778:	2f78      	cmp	r7, #120	@ 0x78
 800477a:	4691      	mov	r9, r2
 800477c:	4680      	mov	r8, r0
 800477e:	460c      	mov	r4, r1
 8004780:	469a      	mov	sl, r3
 8004782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004786:	d807      	bhi.n	8004798 <_printf_i+0x28>
 8004788:	2f62      	cmp	r7, #98	@ 0x62
 800478a:	d80a      	bhi.n	80047a2 <_printf_i+0x32>
 800478c:	2f00      	cmp	r7, #0
 800478e:	f000 80d2 	beq.w	8004936 <_printf_i+0x1c6>
 8004792:	2f58      	cmp	r7, #88	@ 0x58
 8004794:	f000 80b9 	beq.w	800490a <_printf_i+0x19a>
 8004798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800479c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047a0:	e03a      	b.n	8004818 <_printf_i+0xa8>
 80047a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047a6:	2b15      	cmp	r3, #21
 80047a8:	d8f6      	bhi.n	8004798 <_printf_i+0x28>
 80047aa:	a101      	add	r1, pc, #4	@ (adr r1, 80047b0 <_printf_i+0x40>)
 80047ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047b0:	08004809 	.word	0x08004809
 80047b4:	0800481d 	.word	0x0800481d
 80047b8:	08004799 	.word	0x08004799
 80047bc:	08004799 	.word	0x08004799
 80047c0:	08004799 	.word	0x08004799
 80047c4:	08004799 	.word	0x08004799
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	08004799 	.word	0x08004799
 80047d0:	08004799 	.word	0x08004799
 80047d4:	08004799 	.word	0x08004799
 80047d8:	08004799 	.word	0x08004799
 80047dc:	0800491d 	.word	0x0800491d
 80047e0:	08004847 	.word	0x08004847
 80047e4:	080048d7 	.word	0x080048d7
 80047e8:	08004799 	.word	0x08004799
 80047ec:	08004799 	.word	0x08004799
 80047f0:	0800493f 	.word	0x0800493f
 80047f4:	08004799 	.word	0x08004799
 80047f8:	08004847 	.word	0x08004847
 80047fc:	08004799 	.word	0x08004799
 8004800:	08004799 	.word	0x08004799
 8004804:	080048df 	.word	0x080048df
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	1d1a      	adds	r2, r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6032      	str	r2, [r6, #0]
 8004810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004818:	2301      	movs	r3, #1
 800481a:	e09d      	b.n	8004958 <_printf_i+0x1e8>
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	6820      	ldr	r0, [r4, #0]
 8004820:	1d19      	adds	r1, r3, #4
 8004822:	6031      	str	r1, [r6, #0]
 8004824:	0606      	lsls	r6, r0, #24
 8004826:	d501      	bpl.n	800482c <_printf_i+0xbc>
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	e003      	b.n	8004834 <_printf_i+0xc4>
 800482c:	0645      	lsls	r5, r0, #25
 800482e:	d5fb      	bpl.n	8004828 <_printf_i+0xb8>
 8004830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004834:	2d00      	cmp	r5, #0
 8004836:	da03      	bge.n	8004840 <_printf_i+0xd0>
 8004838:	232d      	movs	r3, #45	@ 0x2d
 800483a:	426d      	negs	r5, r5
 800483c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004840:	4859      	ldr	r0, [pc, #356]	@ (80049a8 <_printf_i+0x238>)
 8004842:	230a      	movs	r3, #10
 8004844:	e011      	b.n	800486a <_printf_i+0xfa>
 8004846:	6821      	ldr	r1, [r4, #0]
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	0608      	lsls	r0, r1, #24
 800484c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004850:	d402      	bmi.n	8004858 <_printf_i+0xe8>
 8004852:	0649      	lsls	r1, r1, #25
 8004854:	bf48      	it	mi
 8004856:	b2ad      	uxthmi	r5, r5
 8004858:	2f6f      	cmp	r7, #111	@ 0x6f
 800485a:	4853      	ldr	r0, [pc, #332]	@ (80049a8 <_printf_i+0x238>)
 800485c:	6033      	str	r3, [r6, #0]
 800485e:	bf14      	ite	ne
 8004860:	230a      	movne	r3, #10
 8004862:	2308      	moveq	r3, #8
 8004864:	2100      	movs	r1, #0
 8004866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800486a:	6866      	ldr	r6, [r4, #4]
 800486c:	60a6      	str	r6, [r4, #8]
 800486e:	2e00      	cmp	r6, #0
 8004870:	bfa2      	ittt	ge
 8004872:	6821      	ldrge	r1, [r4, #0]
 8004874:	f021 0104 	bicge.w	r1, r1, #4
 8004878:	6021      	strge	r1, [r4, #0]
 800487a:	b90d      	cbnz	r5, 8004880 <_printf_i+0x110>
 800487c:	2e00      	cmp	r6, #0
 800487e:	d04b      	beq.n	8004918 <_printf_i+0x1a8>
 8004880:	4616      	mov	r6, r2
 8004882:	fbb5 f1f3 	udiv	r1, r5, r3
 8004886:	fb03 5711 	mls	r7, r3, r1, r5
 800488a:	5dc7      	ldrb	r7, [r0, r7]
 800488c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004890:	462f      	mov	r7, r5
 8004892:	42bb      	cmp	r3, r7
 8004894:	460d      	mov	r5, r1
 8004896:	d9f4      	bls.n	8004882 <_printf_i+0x112>
 8004898:	2b08      	cmp	r3, #8
 800489a:	d10b      	bne.n	80048b4 <_printf_i+0x144>
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	07df      	lsls	r7, r3, #31
 80048a0:	d508      	bpl.n	80048b4 <_printf_i+0x144>
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	6861      	ldr	r1, [r4, #4]
 80048a6:	4299      	cmp	r1, r3
 80048a8:	bfde      	ittt	le
 80048aa:	2330      	movle	r3, #48	@ 0x30
 80048ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048b4:	1b92      	subs	r2, r2, r6
 80048b6:	6122      	str	r2, [r4, #16]
 80048b8:	f8cd a000 	str.w	sl, [sp]
 80048bc:	464b      	mov	r3, r9
 80048be:	aa03      	add	r2, sp, #12
 80048c0:	4621      	mov	r1, r4
 80048c2:	4640      	mov	r0, r8
 80048c4:	f7ff fee6 	bl	8004694 <_printf_common>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d14a      	bne.n	8004962 <_printf_i+0x1f2>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	b004      	add	sp, #16
 80048d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	f043 0320 	orr.w	r3, r3, #32
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	4833      	ldr	r0, [pc, #204]	@ (80049ac <_printf_i+0x23c>)
 80048e0:	2778      	movs	r7, #120	@ 0x78
 80048e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	6831      	ldr	r1, [r6, #0]
 80048ea:	061f      	lsls	r7, r3, #24
 80048ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80048f0:	d402      	bmi.n	80048f8 <_printf_i+0x188>
 80048f2:	065f      	lsls	r7, r3, #25
 80048f4:	bf48      	it	mi
 80048f6:	b2ad      	uxthmi	r5, r5
 80048f8:	6031      	str	r1, [r6, #0]
 80048fa:	07d9      	lsls	r1, r3, #31
 80048fc:	bf44      	itt	mi
 80048fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004902:	6023      	strmi	r3, [r4, #0]
 8004904:	b11d      	cbz	r5, 800490e <_printf_i+0x19e>
 8004906:	2310      	movs	r3, #16
 8004908:	e7ac      	b.n	8004864 <_printf_i+0xf4>
 800490a:	4827      	ldr	r0, [pc, #156]	@ (80049a8 <_printf_i+0x238>)
 800490c:	e7e9      	b.n	80048e2 <_printf_i+0x172>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	f023 0320 	bic.w	r3, r3, #32
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	e7f6      	b.n	8004906 <_printf_i+0x196>
 8004918:	4616      	mov	r6, r2
 800491a:	e7bd      	b.n	8004898 <_printf_i+0x128>
 800491c:	6833      	ldr	r3, [r6, #0]
 800491e:	6825      	ldr	r5, [r4, #0]
 8004920:	6961      	ldr	r1, [r4, #20]
 8004922:	1d18      	adds	r0, r3, #4
 8004924:	6030      	str	r0, [r6, #0]
 8004926:	062e      	lsls	r6, r5, #24
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	d501      	bpl.n	8004930 <_printf_i+0x1c0>
 800492c:	6019      	str	r1, [r3, #0]
 800492e:	e002      	b.n	8004936 <_printf_i+0x1c6>
 8004930:	0668      	lsls	r0, r5, #25
 8004932:	d5fb      	bpl.n	800492c <_printf_i+0x1bc>
 8004934:	8019      	strh	r1, [r3, #0]
 8004936:	2300      	movs	r3, #0
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	4616      	mov	r6, r2
 800493c:	e7bc      	b.n	80048b8 <_printf_i+0x148>
 800493e:	6833      	ldr	r3, [r6, #0]
 8004940:	1d1a      	adds	r2, r3, #4
 8004942:	6032      	str	r2, [r6, #0]
 8004944:	681e      	ldr	r6, [r3, #0]
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	2100      	movs	r1, #0
 800494a:	4630      	mov	r0, r6
 800494c:	f7fb fc40 	bl	80001d0 <memchr>
 8004950:	b108      	cbz	r0, 8004956 <_printf_i+0x1e6>
 8004952:	1b80      	subs	r0, r0, r6
 8004954:	6060      	str	r0, [r4, #4]
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	6123      	str	r3, [r4, #16]
 800495a:	2300      	movs	r3, #0
 800495c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004960:	e7aa      	b.n	80048b8 <_printf_i+0x148>
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	4632      	mov	r2, r6
 8004966:	4649      	mov	r1, r9
 8004968:	4640      	mov	r0, r8
 800496a:	47d0      	blx	sl
 800496c:	3001      	adds	r0, #1
 800496e:	d0ad      	beq.n	80048cc <_printf_i+0x15c>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	079b      	lsls	r3, r3, #30
 8004974:	d413      	bmi.n	800499e <_printf_i+0x22e>
 8004976:	68e0      	ldr	r0, [r4, #12]
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	4298      	cmp	r0, r3
 800497c:	bfb8      	it	lt
 800497e:	4618      	movlt	r0, r3
 8004980:	e7a6      	b.n	80048d0 <_printf_i+0x160>
 8004982:	2301      	movs	r3, #1
 8004984:	4632      	mov	r2, r6
 8004986:	4649      	mov	r1, r9
 8004988:	4640      	mov	r0, r8
 800498a:	47d0      	blx	sl
 800498c:	3001      	adds	r0, #1
 800498e:	d09d      	beq.n	80048cc <_printf_i+0x15c>
 8004990:	3501      	adds	r5, #1
 8004992:	68e3      	ldr	r3, [r4, #12]
 8004994:	9903      	ldr	r1, [sp, #12]
 8004996:	1a5b      	subs	r3, r3, r1
 8004998:	42ab      	cmp	r3, r5
 800499a:	dcf2      	bgt.n	8004982 <_printf_i+0x212>
 800499c:	e7eb      	b.n	8004976 <_printf_i+0x206>
 800499e:	2500      	movs	r5, #0
 80049a0:	f104 0619 	add.w	r6, r4, #25
 80049a4:	e7f5      	b.n	8004992 <_printf_i+0x222>
 80049a6:	bf00      	nop
 80049a8:	08004b45 	.word	0x08004b45
 80049ac:	08004b56 	.word	0x08004b56

080049b0 <memmove>:
 80049b0:	4288      	cmp	r0, r1
 80049b2:	b510      	push	{r4, lr}
 80049b4:	eb01 0402 	add.w	r4, r1, r2
 80049b8:	d902      	bls.n	80049c0 <memmove+0x10>
 80049ba:	4284      	cmp	r4, r0
 80049bc:	4623      	mov	r3, r4
 80049be:	d807      	bhi.n	80049d0 <memmove+0x20>
 80049c0:	1e43      	subs	r3, r0, #1
 80049c2:	42a1      	cmp	r1, r4
 80049c4:	d008      	beq.n	80049d8 <memmove+0x28>
 80049c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ce:	e7f8      	b.n	80049c2 <memmove+0x12>
 80049d0:	4402      	add	r2, r0
 80049d2:	4601      	mov	r1, r0
 80049d4:	428a      	cmp	r2, r1
 80049d6:	d100      	bne.n	80049da <memmove+0x2a>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049e2:	e7f7      	b.n	80049d4 <memmove+0x24>

080049e4 <_sbrk_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4d06      	ldr	r5, [pc, #24]	@ (8004a00 <_sbrk_r+0x1c>)
 80049e8:	2300      	movs	r3, #0
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	602b      	str	r3, [r5, #0]
 80049f0:	f7fc fbde 	bl	80011b0 <_sbrk>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_sbrk_r+0x1a>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_sbrk_r+0x1a>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	20001364 	.word	0x20001364

08004a04 <memcpy>:
 8004a04:	440a      	add	r2, r1
 8004a06:	4291      	cmp	r1, r2
 8004a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a0c:	d100      	bne.n	8004a10 <memcpy+0xc>
 8004a0e:	4770      	bx	lr
 8004a10:	b510      	push	{r4, lr}
 8004a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a1a:	4291      	cmp	r1, r2
 8004a1c:	d1f9      	bne.n	8004a12 <memcpy+0xe>
 8004a1e:	bd10      	pop	{r4, pc}

08004a20 <_realloc_r>:
 8004a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a24:	4680      	mov	r8, r0
 8004a26:	4615      	mov	r5, r2
 8004a28:	460c      	mov	r4, r1
 8004a2a:	b921      	cbnz	r1, 8004a36 <_realloc_r+0x16>
 8004a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a30:	4611      	mov	r1, r2
 8004a32:	f7ff bc4b 	b.w	80042cc <_malloc_r>
 8004a36:	b92a      	cbnz	r2, 8004a44 <_realloc_r+0x24>
 8004a38:	f7ff fbdc 	bl	80041f4 <_free_r>
 8004a3c:	2400      	movs	r4, #0
 8004a3e:	4620      	mov	r0, r4
 8004a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a44:	f000 f81a 	bl	8004a7c <_malloc_usable_size_r>
 8004a48:	4285      	cmp	r5, r0
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	d802      	bhi.n	8004a54 <_realloc_r+0x34>
 8004a4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a52:	d8f4      	bhi.n	8004a3e <_realloc_r+0x1e>
 8004a54:	4629      	mov	r1, r5
 8004a56:	4640      	mov	r0, r8
 8004a58:	f7ff fc38 	bl	80042cc <_malloc_r>
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d0ec      	beq.n	8004a3c <_realloc_r+0x1c>
 8004a62:	42b5      	cmp	r5, r6
 8004a64:	462a      	mov	r2, r5
 8004a66:	4621      	mov	r1, r4
 8004a68:	bf28      	it	cs
 8004a6a:	4632      	movcs	r2, r6
 8004a6c:	f7ff ffca 	bl	8004a04 <memcpy>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4640      	mov	r0, r8
 8004a74:	f7ff fbbe 	bl	80041f4 <_free_r>
 8004a78:	463c      	mov	r4, r7
 8004a7a:	e7e0      	b.n	8004a3e <_realloc_r+0x1e>

08004a7c <_malloc_usable_size_r>:
 8004a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a80:	1f18      	subs	r0, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bfbc      	itt	lt
 8004a86:	580b      	ldrlt	r3, [r1, r0]
 8004a88:	18c0      	addlt	r0, r0, r3
 8004a8a:	4770      	bx	lr

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
